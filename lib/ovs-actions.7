'\" tp
.\" -*- mode: troff; coding: utf-8 -*-
.TH "ovs\-actions" 7 "2.13.3" "Open vSwitch" "Open vSwitch Manual"
.fp 5 L CR              \" Make fixed-width font available as \fL.
.de ST
.  PP
.  RS -0.15in
.  I "\\$1"
.  RE
..

.de SU
.  PP
.  I "\\$1"
..

.de IQ
.  br
.  ns
.  IP "\\$1"
..

.de TQ
.  br
.  ns
.  TP "\\$1"
..
.de URL
\\$2 \(laURL: \\$1 \(ra\\$3
..
.if \n[.g] .mso www.tmac
.SH NAME
ovs\-actions \- OpenFlow actions and instructions with Open vSwitch extensions
.
.PP

.SH "INTRODUCTION"
.PP
This document aims to comprehensively document all of the OpenFlow actions and instructions, both standard and non-standard, supported by Open vSwitch, regardless of origin\[char46] The document includes information of interest to Open vSwitch users, such as the semantics of each supported action and the syntax used by Open vSwitch tools, and to developers seeking to build controllers and switches compatible with Open vSwitch, such as the wire format for each supported message\[char46]
.SS "Actions"
.PP
In this document, we define an \fIaction\fR as an OpenFlow action, which is a kind of command that specifies what to do with a packet\[char46] Actions are used in OpenFlow flows to describe what to do when the flow matches a packet, and in a few other places in OpenFlow\[char46] Each version of the OpenFlow specification defines standard actions, and beyond that many OpenFlow switches, including Open vSwitch, implement extensions to the standard\[char46]
.PP
OpenFlow groups actions in two ways: as an \fIaction list\fR or an \fIaction set\fR, described below\[char46]
.ST "Action Lists"
.PP
An \fIaction list\fR, a concept present in every version of OpenFlow, is simply an ordered sequence of actions\[char46] The OpenFlow specifications require a switch to execute actions within an action list in the order specified, and to refuse to execute an action list entirely if it cannot implement the actions in that order [OpenFlow 1\[char46]0, section 3\[char46]3], with one exception: when an action list outputs multiple packets, the switch may output the packets in an order different from that specified\[char46] Usually, this exception is not important, especially in the common case when the packets are output to different ports\[char46]
.ST "Action Sets"
.PP
OpenFlow 1\[char46]1 introduced the concept of an \fIaction set\fR\[char46] An action set is also a sequence of actions, but the switch reorders the actions and drops duplicates according to rules specified in the OpenFlow specifications\[char46] Because of these semantics, some standard OpenFlow actions cannot usefully be included in an action set\[char46] For some, but not all, Open vSwitch extension actions, Open vSwitch defines its own action set semantics and ordering\[char46]
.PP
The OpenFlow pipeline has an action set associated with it as a packet is processed\[char46] After pipeline processing is otherwise complete, the switch executes the actions in the action set\[char46]
.PP
Open vSwitch applies actions in an action set in the following order: Except as noted otherwise below, the action set only executes at most a single action of each type, and when more than one action of a given type is present, the one added to the set later replaces the earlier action:
.RS
.IP 1. .4in
\fBstrip_vlan\fR
.IP 2. .4in
\fBpop_mpls\fR
.IP 3. .4in
\fBdecap\fR
.IP 4. .4in
\fBencap\fR
.IP 5. .4in
\fBpush_mpls\fR
.IP 6. .4in
\fBpush_vlan\fR
.IP 7. .4in
\fBdec_ttl\fR
.IP 8. .4in
\fBdec_mpls_ttl\fR
.IP 9. .4in
\fBdec_nsh_ttl\fR
.IP 10. .4in
All of the following actions are executed in the order added to the action set, with cumulative effect\[char46] That is, when multiple actions modify the same part of a field, the later modification takes effect, and when they modify different parts of a field (or different fields), then both modifications are applied:
.RS
.IP \(bu
\fBload\fR
.IP \(bu
\fBmove\fR
.IP \(bu
\fBmod_dl_dst\fR
.IP \(bu
\fBmod_dl_src\fR
.IP \(bu
\fBmod_nw_dst\fR
.IP \(bu
\fBmod_nw_src\fR
.IP \(bu
\fBmod_nw_tos\fR
.IP \(bu
\fBmod_nw_ecn\fR
.IP \(bu
\fBmod_nw_ttl\fR
.IP \(bu
\fBmod_tp_dst\fR
.IP \(bu
\fBmod_tp_src\fR
.IP \(bu
\fBmod_vlan_pcp\fR
.IP \(bu
\fBmod_vlan_vid\fR
.IP \(bu
\fBset_field\fR
.IP \(bu
\fBset_tunnel\fR
.IP \(bu
\fBset_tunnel64\fR
.RE
.IP 11. .4in
\fBset_queue\fR
.IP 12. .4in
\fBgroup\fR, \fBoutput\fR, \fBresubmit\fR, \fBct_clear\fR, or \fBct\fR\[char46] If more than one of these actions is present, then the one listed earliest above is executed and the others are ignored, regardless of the order in which they were added to the action set\[char46] (If none of these actions is present, the action set has no real effect, because the modified packet is not sent anywhere and thus the modifications are not visible\[char46])
.RE
.PP
An action set may only contain the actions listed above\[char46]
.SS "Error Handling"
.PP
Packet processing can encounter a variety of errors:
.RS
.TP
Bridge not found
Open vSwitch supports an extension to the standard OpenFlow \fBcontroller\fR action called a ``continuation,\(cq\(cq which allows the controller to interrupt and later resume the processing of a packet through the switch pipeline\[char46] This error occurs when such a packet\(cqs processing cannot be resumed, e\[char46]g\[char46] because the bridge processing it has been destroyed\[char46] Open vSwitch reports this error to the controller as Open vSwitch extension error \fBNXR_STALE\fR\[char46]
.IP
This error prevents packet processing entirely\[char46]
.TP
Recursion too deep
While processing a given packet, Open vSwitch limits the flow table recursion depth to 64, to ensure that packet processing uses a finite amount of time and space\[char46] Actions that count against the recursion limit include \fBresubmit\fR from a given OpenFlow table to the same or an earlier table, \fBgroup\fR, and \fBoutput\fR to patch ports\[char46]
.IP
A \fBresubmit\fR from one table to a later one (or, equivalently\[char46] a \fBgoto_table\fR instruction) does not count against the depth limit because resubmits to strictly monotonically increasing tables will eventually terminate\[char46] OpenFlow tables are most commonly traversed in numerically increasing order, so this limit has little effect on conventionally designed OpenFlow pipelines\[char46]
.IP
This error terminates packet processing\[char46] Any previous side effects (e\[char46]g\[char46] output actions) are retained\[char46]
.IP
Usually this error indicates a loop or other bug in the OpenFlow flow tables\[char46] To assist debugging, when this error occurs, Open vSwitch 2\[char46]10 and later logs a trace of the packet execution, as if by \fBovs\-appctl ofproto/trace\fR, rate-limited to one per minute to reduce the log volume\[char46]
.TP
Too many resubmits
Open vSwitch limits the total number of \fBresubmit\fR actions that a given packet can execute to 4,096\[char46] For this purpose, \fBgoto_table\fR instructions and output to the \fBtable\fR port are treated like \fBresubmit\fR\[char46] This limits the amount of time to process a single packet\[char46]
.IP
Unlike the limit on recursion depth, the limit on resubmits counts all resubmits, regardless of direction\[char46]
.IP
This error has the same effect, including logging, as exceeding the recursion depth limit\[char46]
.TP
Stack too deep
Open vSwitch limits the amount of data that the \fBpush\fR action can put onto the stack at one time to 64 kB of data\[char46]
.IP
This error terminates packet processing\[char46] Any previous side effects (e\[char46]g\[char46] output actions) are retained\[char46]
.TP
No recirculation context
.TQ .5in
Recirculation conflict
These errors indicate internal errors inside Open vSwitch and should generally not occur\[char46] If you notice recurring log messages about these errors, please report a bug\[char46]
.TP
Too many MPLS labels
Open vSwitch can process packets with any number of MPLS labels, but its ability to push and pop MPLS labels is limited, currently to 3 labels\[char46] Attempting to push more than the supported number of labels onto a packet, or to pop any number of labels from a packet with more than the supported number, raises this error\[char46]
.IP
This error terminates packet processing, retaining any previous side effects (e\[char46]g\[char46] output actions)\[char46] When this error arises within the execution of a group bucket, it only terminates that bucket\(cqs execution, not packet processing overall\[char46]
.TP
Invalid tunnel metadata
Open vSwitch raises this error when it processes a Geneve packet that has TLV options with an invalid form, e\[char46]g\[char46] where the length in a TLV would extend past the end of the options\[char46]
.IP
This error prevents packet processing entirely\[char46]
.TP
Unsupported packet type
When a \fBencap\fR action encapsulates a packet, Open vSwitch raises this error if it does not support the combination of the new encapsulation with the current packet\[char46] \fBencap(ethernet)\fR raises this error if the current packet is not an L3 packet, and \fBencap(nsh)\fR raises this error if the current packet is not Ethernet, IPv4, IPv6, or NSH\[char46]
.IP
When a \fBdecap\fR action decapsulates a packet, Open vSwitch raises this error if it does not support the type of inner packet\[char46] \fBdecap\fR of an Ethernet header raises this error if a VLAN header is present, \fBdecap\fR of a NSH packet raises this error if the NSH inner packet is not Ethernet, IPv4, IPv6, or NSH, and \fBdecap\fR of other types of packets is unsupported and also raises this error\[char46]
.IP
This error terminates packet processing, retaining any previous side effects (e\[char46]g\[char46] output actions)\[char46] When this error arises within the execution of a group bucket, it only terminates that bucket\(cqs execution, not packet processing overall\[char46]
.RE
.SS "Inconsistencies"
.PP
OpenFlow 1\[char46]0 allows any action to be part of any flow, regardless of the flow\(cqs match\[char46] Some combinations do not make sense, e\[char46]g\[char46] an \fBset_nw_tos\fR action in a flow that matches only ARP packets or \fBstrip_vlan\fR in a flow that matches packets without VLAN tags\[char46] Other combinations have varying results depending on the kind of packet that the flow processes, e\[char46]g\[char46] a \fBset_nw_src\fR action in a flow that does not match on Ethertype will be treated as a no-op when it processes a non-IPv4 packet\[char46] Nevertheless OVS allows all of the above in conformance with OpenFlow 1\[char46]0, that is, the following will succeed:
.PP
.nf
\fB
.br
\fB$ ovs\-ofctl \-O OpenFlow10 add\-flow br0 arp,actions=mod_nw_tos:12
.br
\fB$ ovs\-ofctl \-O OpenFlow10 add\-flow br0 dl_vlan=0xffff,actions=strip_vlan
.br
\fB$ ovs\-ofctl \-O OpenFlow10 add\-flow br0 actions=mod_nw_src:1\[char46]2\[char46]3\[char46]4
.br
\fB  \fR
.fi
.PP
Open vSwitch calls these kinds of combinations \fIinconsistencies\fR between match and actions\[char46] OpenFlow 1\[char46]1 and later forbid inconsistencies, and disallow the examples described above by preventing such flows from being added\[char46] All of the above, for example, will fail with an error message if one replaces \fBOpenFlow10\fR by \fBOpenFlow11\fR\[char46]
.PP
OpenFlow 1\[char46]1 and later cannot detect and disallow all inconsistencies\[char46] For example, the \fBwrite_actions\fR instruction arbitrarily delays execution of the actions inside it, which can even be canceled with \fBclear_actions\fR, so that there is no way to ensure that its actions are consistent with the packet at the time they execute\[char46] Thus, actions with \fBwrite_actions\fR and some other contexts are exempt from consistency requirements\[char46]
.PP
When OVS executes an action inconsistent with the packet, it treats it as a no-op\[char46]
.SS "Inter\-Version Compatibility"
.PP
Open vSwitch supports multiple OpenFlow versions simultaneously on a single switch\[char46] When actions are added with one OpenFlow version and then retrieved with another, Open vSwitch does its best to translate between them\[char46]
.PP
Inter-version compatibility issues can still arise when different connections use different OpenFlow versions\[char46] Backward compatibility is the most obvious case\[char46] Suppose, for example, that an OpenFlow 1\[char46]1 session adds a flow with a \fBpush_vlan\fR action, for which there is no equivalent in OpenFlow 1\[char46]0\[char46] If an OpenFlow 1\[char46]0 session retrieves this flow, Open vSwitch must somehow represent the action\[char46]
.PP
Forward compatibility can also be an issue, because later OpenFlow versions sometimes remove functionality\[char46] The best example is the \fBenqueue\fR action from OpenFlow 1\[char46]0, which OpenFlow 1\[char46]1 removed\[char46]
.PP
In practice, Open vSwitch uses a variety of strategies for inter-version compatibility:
.RS
.IP \(bu
Most standard OpenFlow actions, such as \fBoutput\fR actions, translate without compatibility issues\[char46]
.IP \(bu
Open vSwitch supports its extension actions in every OpenFlow version, so they do not pose inter-version compatibility problems\[char46]
.IP \(bu
Open vSwitch sometimes adds extension actions to ensure backward or forward compatibility\[char46] For example, for backward compatibility with the \fBgroup\fR action added in OpenFlow 1\[char46]1, Open vSwitch includes an OpenFlow 1\[char46]0 extension \fBgroup\fR action\[char46]
.RE
.PP
Perfect inter-version compatibility is not possible, so best results require OpenFlow connections to use a consistent version\[char46] One may enforce use of a particular version by setting the \fBprotocols\fR column for a bridge, e\[char46]g\[char46] to force \fBbr0\fR to use only OpenFlow 1\[char46]3:
.PP
.nf
\fB
.br
\fB    ovs\-vsctl set bridge br0 protocols=OpenFlow13
.br
\fB  \fR
.fi
.SS "Field Specifications"
.PP
Many Open vSwitch actions refer to fields\[char46] In such cases, fields may usually be referred to by their common names, such as \fBeth_dst\fR for the Ethernet destination field, or by their full OXM or NXM names, such as \fBNXM_OF_ETH_DST\fR or \fBOXM_OF_ETH_DST\fR\[char46] Before Open vSwitch 2\[char46]7, only OXM or NXM field names were accepted\[char46]
.PP
Many actions that act on fields can also act on \fIsubfields\fR, that is, parts of fields, written as \fB\fIfield\fB[\fIstart\fB\[char46]\[char46]\fIend\fB]\fR, where \fIstart\fR is the first bit and \fIend\fR is the last bit to use in \fIfield\fR, e\[char46]g\[char46] \fBvlan_tci[13\[char46]\[char46]15]\fR for the VLAN PCP\[char46] A single-bit subfield may also be written as \fB\fIfield\fB[\fIoffset\fB]\fR, e\[char46]g\[char46] \fBvlan_tci[13]\fR for the least-significant bit of the VLAN PCP\[char46] Empty brackets may be used to explicitly designate an entire field, e\[char46]g\[char46] \fBvlan_tci[]\fR for the entire 16-bit VLAN TCI header\[char46] Before Open vSwitch 2\[char46]7, brackets were required in field specifications\[char46]
.PP
See \fBovs\-fields\fR(7) for a list of fields and their names\[char46]
.SS "Port Specifications"
.PP
Many Open vSwitch actions refer to OpenFlow ports\[char46] In such cases, the port may be specified as a numeric port number in the range 0 to 65,535, although Open vSwitch only assigns port numbers in the range 1 through 62,279 to ports\[char46] OpenFlow 1\[char46]1 and later use 32-bit port numbers, but Open vSwitch never assigns a port number that requires more than 16 bits\[char46]
.PP
In most contexts, the name of a port may also be used\[char46] (The most obvious context where a port name may not be used is in an \fBovs\-ofctl\fR command along with the \fB\-\-no\-names\fR option\[char46]) When a port\(cqs name contains punctuation or could be ambiguous with other actions, the name may be enclosed in double quotes, with JSON-like string escapes supported (see [RFC 8259])\[char46]
.PP
Open vSwitch also supports the following standard OpenFlow port names (even in contexts where port names are not otherwise supported)\[char46] The corresponding OpenFlow 1\[char46]0 and 1\[char46]1+ port numbers are listed alongside them but should not be used in flow syntax:
.RS
.IP \(bu
\fBin_port\fR (65528 or 0xfff8; 0xfffffff8)
.IP \(bu
\fBtable\fR (65529 or 0xfff9; 0xfffffff9)
.IP \(bu
\fBnormal\fR (65530 or 0xfffa; 0xfffffffa)
.IP \(bu
\fBflood\fR (65531 or 0xfffb; 0xfffffffb)
.IP \(bu
\fBall\fR (65532 or 0xfffc; 0xfffffffc)
.IP \(bu
\fBcontroller\fR (65533 or 0xfffd; 0xfffffffd)
.IP \(bu
\fBlocal\fR (65534 or 0xfffe; 0xfffffffe)
.IP \(bu
\fBany\fR or \fBnone\fR (65535 or 0xffff; 0xffffffff)
.IP \(bu
\fBunset\fR (not in OpenFlow 1\[char46]0; 0xfffffff7)
.RE
.bp
.SH "OUTPUT ACTIONS"
.PP
.PP
These actions send a packet to a physical port or a controller\[char46] A packet that never encounters an output action on its trip through the Open vSwitch pipeline is effectively dropped\[char46] Because actions are executed in order, a packet modification action that is not eventually followed by an output action will not have an externally visible effect\[char46]
.PP
.PP
.SS "The \fBoutput\fB action"
.IP "\fBSyntax:\fR"
\fIport\fR
.IQ
\fBoutput:\fR\fIport\fR
.IQ
\fBoutput:\fIfield\fB\fR
.IQ
\fBoutput(port=\fIport\fB, max_len=\fInbytes\fB)\fR
.PP
.PP
Outputs the packet to an OpenFlow port most commonly specified as \fIport\fR\[char46] Alternatively, the output port may be read from \fIfield\fR, a field or subfield in the syntax described under ``Field Specifications\(cq\(cq above\[char46] Either way, if the port is the packet\(cqs input port, the packet is not output\[char46]
.PP
.PP
The port may be one of the following standard OpenFlow ports:
.PP
.RS
.TP
\fBlocal\fR
Outputs the packet on the ``local port\(cq\(cq that corresponds to the network device that has the same name as the bridge, unless the packet was received on the local port\[char46] OpenFlow switch implementations are not required to have a local port, but Open vSwitch bridges always do\[char46]
.TP
\fBin_port\fR
Outputs the packet on the port on which it was received\[char46] This is the only standard way to output the packet to the input port (but see ``Output to the Input port\(cq\(cq, below)\[char46]
.RE
.PP
.PP
The port may also be one of the following additional OpenFlow ports, unless \fBmax_len\fR is specified:
.PP
.RS
.TP
\fBnormal\fR
Subjects the packet to the device\(cqs normal L2/L3 processing\[char46] This action is not implemented by all OpenFlow switches, and each switch implements it differently\[char46]
.TP
\fBflood\fR
Outputs the packet on all switch physical ports, except the port on which it was received and any ports on which flooding is disabled\[char46] Flooding can be disabled automatically on a port by Open vSwitch when IEEE 802\[char46]1D spanning tree (STP) or rapid spanning tree (RSTP) is enabled, or by a controller using an OpenFlow \fBOFPT_MOD_PORT\fR request to set the port\(cqs \fBOFPPC_NO_FLOOD\fR flag (\fBovs\-ofctl mod\-port\fR provides a command-line interface to set this flag)\[char46]
.TP
\fBall\fR
Outputs the packet on all switch physical ports except the port on which it was received\[char46]
.TP
\fBcontroller\fR
Sends the packet and its metadata to an OpenFlow controller or controllers encapsulated in an OpenFlow ``packet-in\(cq\(cq message\[char46] The separate \fBcontroller\fR action, described below, provides more options for output to a controller\[char46]
.RE
.PP
.PP
Open vSwitch rejects output to other standard OpenFlow ports, including \fBnone\fR, \fBunset\fR, and port numbers reserved for future use as standard ports, with the error \fBOFPBAC_BAD_OUT_PORT\fR\[char46]
.PP
.PP
With \fImax_len\fR, the packet is truncated to at most \fInbytes\fR bytes before being output\[char46] In this case, the output port may not be a patch port\[char46] Truncation is just for the single output action, so that later actions in the OpenFlow pipeline work with the complete packet\[char46] The truncation feature is meant for use in monitoring applications, e\[char46]g\[char46] for mirroring packets to a collector\[char46]
.PP
.PP
When an \fBoutput\fR action specifies the number of a port that does not currently exist (and is not in the range for standard ports), the OpenFlow specification allows but does not require OVS to reject the action\[char46] All versions of Open vSwitch treat such an action as a no-op\[char46] If a port with the number is created later, then the action will be honored at that point\[char46] (OpenFlow requires OVS to reject output to a port number that will never be valid, with \fBOFPBAC_BAD_OUT_PORT\fR, but this situation does not arise when OVS is a software switch, since the user can add or renumber ports at any time\[char46])
.PP
.PP
A controller can suppress output to a port by setting its \fBOFPPC_NO_FORWARD\fR flag using an OpenFlow \fBOFPT_MOD_PORT\fR request (\fBovs\-ofctl mod\-port\fR provides a command-line interface to set this flag)\[char46] When output is disabled, \fBoutput\fR actions (and other actions that output to the port) are allowed but have no effect\[char46]
.PP
.PP
Open vSwitch allows output to a port that does not exist, although OpenFlow allows switches to reject such actions\[char46]
.PP
.PP
.PP
.ST "Output to the Input Port"
.PP
.PP
OpenFlow requires a switch to ignore attempts to send a packet out its ingress port in the most straightforward way\[char46] For example, \fBoutput:234\fR has no effect if the packet has ingress port 234\[char46] The rationale is that dropping these packets makes it harder to loop the network\[char46] Sometimes this behavior can even be convenient, e\[char46]g\[char46] it is often the desired behavior in a flow that forwards a packet to several ports (``floods\(cq\(cq the packet)\[char46]
.PP
.PP
Sometimes one really needs to send a packet out its ingress port (``hairpin\(cq\(cq)\[char46] In this case, use \fBin_port\fR to explicitly output the packet to its input port, e\[char46]g\[char46]:
.PP
.PP
.nf
\fB
.br
\fB        $ ovs\-ofctl add\-flow br0 in_port=2,actions=in_port
.br
\fB      \fR
.fi
.PP
.PP
This also works in some circumstances where the flow doesn\(cqt match on the input port\[char46] For example, if you know that your switch has five ports numbered 2 through 6, then the following will send every received packet out every port, even its ingress port:
.PP
.PP
.nf
\fB
.br
\fB        $ ovs\-ofctl add\-flow br0 actions=2,3,4,5,6,in_port
.br
\fB      \fR
.fi
.PP
.PP
or, equivalently:
.PP
.PP
.nf
\fB
.br
\fB        $ ovs\-ofctl add\-flow br0 actions=all,in_port
.br
\fB      \fR
.fi
.PP
.PP
Sometimes, in complicated flow tables with multiple levels of \fBresubmit\fR actions, a flow needs to output to a particular port that may or may not be the ingress port\[char46] It\(cqs difficult to take advantage of output to \fBin_port\fR in this situation\[char46] To help, Open vSwitch provides, as an OpenFlow extension, the ability to modify the \fBin_port\fR field\[char46] Whatever value is currently in the \fBin_port\fR field is both the port to which output will be dropped and the destination for \fBin_port\fR\[char46] This means that the following adds flows that reliably output to port 2 or to ports 2 through 6, respectively:
.PP
.PP
.nf
\fB
.br
\fB        $ ovs\-ofctl add\-flow br0 \(dqin_port=2,actions=load:0\->in_port,2\(dq
.br
\fB        $ ovs\-ofctl add\-flow br0 \(dqactions=load:0\->in_port,2,3,4,5,6\(dq
.br
\fB      \fR
.fi
.PP
.PP
If \fBin_port\fR is important for matching or other reasons, one may save and restore it on the stack:
.PP
.PP
.nf
\fB
.br
\fB        $ ovs\-ofctl add\-flow br0 actions=\(dqpush:in_port,\e
.br
\fB        load:0\->in_port,\e
.br
\fB        2,3,4,5,6,\e
.br
\fB        pop:in_port\(dq
.br
\fB      \fR
.fi
.PP
.IP "\fBConformance:\fR"
.PP
All versions of OpenFlow and Open vSwitch support \fBoutput\fR to a literal \fIport\fR\[char46] Output to a register is an OpenFlow extension introduced in Open vSwitch 1\[char46]3\[char46] Output with truncation is an OpenFlow extension introduced in Open vSwitch 2\[char46]6\[char46]
.PP
.PP
.PP
.SS "The \fBcontroller\fB action"
.IP "\fBSyntax:\fR"
\fBcontroller\fR
.IQ
\fBcontroller:\fR\fImax_len\fR
.IQ
\fBcontroller(\fR\fIkey\fR[\fB=\fR\fIvalue\fR]\fB,\fR \[char46]\[char46]\[char46]\fB)\fR
.PP
.PP
Sends the packet and its metadata to an OpenFlow controller or controllers encapsulated in an OpenFlow ``packet-in\(cq\(cq message\[char46] The supported options are:
.PP
.RS
.TP
\fBmax_len=\fR\fImax_len\fR
Limit to \fImax_len\fR the number of bytes of the packet to send in the ``packet-in\[char46]\(cq\(cq A \fImax_len\fR of 0 prevents any of the packet from being sent (thus, only metadata is included)\[char46] By default, the entire packet is sent, equivalent to a \fImax_len\fR of 65535\[char46]
.TP
\fBreason=\fR\fIreason\fR
Specify \fIreason\fR as the reason for sending the message in the ``packet-in\[char46]\(cq\(cq The supported reasons are \fBno_match\fR, \fBaction\fR, \fBinvalid_ttl\fR, \fBaction_set\fR, \fBgroup\fR, and \fBpacket_out\fR\[char46] The default reason is \fBaction\fR\[char46]
.TP
\fBid=\fR\fIcontroller_id\fR
Specify \fIcontroller_id\fR, a 16-bit integer, as the connection ID of the OpenFlow controller or controllers to which the ``packet-in\(cq\(cq message should be sent\[char46] The default is zero\[char46] Zero is also the default connection ID for each controller connection, and a given controller connection will only have a nonzero connection ID if its controller uses the \fBNXT_SET_CONTROLLER_ID\fR Open vSwitch extension to OpenFlow\[char46]
.TP
\fBuserdata=\fR\fIhh\fR\[char46]\[char46]\[char46]
Supplies the bytes represented as hex digits \fIhh\fR as additional data to the controller in the ``packet-in\(cq\(cq message\[char46] Pairs of hex digits may be separated by periods for readability\[char46]
.TP
\fBpause\fR
Causes the switch to freeze the packet\(cqs trip through Open vSwitch flow tables and serializes that state into the packet-in message as a ``continuation,\(cq\(cq an additional property in the \fBNXT_PACKET_IN2\fR message\[char46] The controller can later send the continuation back to the switch in an \fBNXT_RESUME\fR message, which will restart the packet\(cqs traversal from the point where it was interrupted\[char46] This permits an OpenFlow controller to interpose on a packet midway through processing in Open vSwitch\[char46]
.RE
.PP
.IP "\fBConformance:\fR"
.PP
All versions of OpenFlow and Open vSwitch support \fBcontroller\fR action and its \fBmax_len\fR option\[char46] The \fBuserdata\fR and \fBpause\fR options require the Open vSwitch \fBNXAST_CONTROLLER2\fR extension action added in Open vSwitch 2\[char46]6\[char46] In the absence of these options, the \fIreason\fR (other than \fBreason=action\fR) and \fIcontroller_id\fR (option than \fBcontroller_id=0\fR) options require the Open vSwitch \fBNXAST_CONTROLLER\fR extension action added in Open vSwitch 1\[char46]6\[char46]
.PP
.PP
.PP
.SS "The \fBenqueue\fB action"
.IP "\fBSyntax:\fR"
\fBenqueue(\fR\fIport\fR\fB,\fR\fIqueue\fR\fB)\fR
.IQ
\fBenqueue:\fR\fIport\fR\fB:\fR\fIqueue\fR
.PP
.PP
Enqueues the packet on the specified \fIqueue\fR within port \fIport\fR\[char46]
.PP
.PP
\fIport\fR must be an OpenFlow port number or name as described under ``Port Specifications\(cq\(cq above\[char46] \fIport\fR may be \fBin_port\fR or \fBlocal\fR but the other standard OpenFlow ports are not allowed\[char46]
.PP
.PP
\fIqueue\fR must be a a number between 0 and 4294967294 (0xfffffffe), inclusive\[char46] The number of actually supported queues depends on the switch\[char46] Some OpenFlow implementations do not support queuing at all\[char46] In Open vSwitch, the supported queues vary depending on the operating system, datapath, and hardware in use\[char46] Use the \fBQoS\fR and \fBQueue\fR tables in the Open vSwitch database to configure queuing on individual OpenFlow ports (see \fBovs\-vswitchd\[char46]conf\[char46]db\fR(5) for more information)\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
.PP
.PP
Only OpenFlow 1\[char46]0 supports \fBenqueue\fR\[char46] OpenFlow 1\[char46]1 added the \fBset_queue\fR action to use in its place along with \fBoutput\fR\[char46]
.PP
.PP
Open vSwitch translates \fBenqueue\fR to a sequence of three actions in OpenFlow 1\[char46]1 or later: \fBset_queue:\fIqueue\fB,
output:\fIport\fB, pop_queue\fR\[char46] This is equivalent in behavior as long as the flow table does not otherwise use \fBset_queue\fR, but it relies on the \fBpop_queue\fR Open vSwitch extension action\[char46]
.PP
.PP
.PP
.SS "The \fBbundle\fB and \fBbundle_load\fB actions"
.IP "\fBSyntax:\fR"
\fBbundle(\fR\fIfields\fR\fB, \fR\fIbasis\fR\fB, \fR\fIalgorithm\fR\fB, ofport, slaves:\fR\fIport\fR\[char46]\[char46]\[char46]\fB)\fR
.IQ
\fBbundle_load(\fR\fIfields\fR\fB, \fR\fIbasis\fR\fB, \fR\fIalgorithm\fR\fB, ofport, \fR\fIdst\fR\fB, slaves:\fR\fIport\fR\[char46]\[char46]\[char46]\fB)\fR
.PP
.PP
These actions choose a port (``slave\(cq\(cq) from a comma-separated OpenFlow \fIport\fR list\[char46] After selecting the port, \fBbundle\fR outputs to it, whereas \fBbundle_load\fR writes its port number to \fIdst\fR, which must be a 16-bit or wider field or subfield in the syntax described under ``Field Specifications\(cq\(cq above\[char46]
.PP
.PP
These actions hash a set of \fIfields\fR using \fIbasis\fR as a universal hash parameter, then apply the bundle link selection \fIalgorithm\fR to choose a \fIport\fR\[char46]
.PP
.PP
\fIfields\fR must be one of the following\[char46] For the options with ``symmetric\(cq\(cq in the name, reversing source and destination addresses yields the same hash:
.PP
.RS
.TP
\fBeth_src\fR
Ethernet source address\[char46]
.TP
\fBnw_src\fR
IPv4 or IPv6 source address\[char46]
.TP
\fBnw_dst\fR
IPv4 or IPv6 destination address\[char46]
.TP
\fBsymmetric_l4\fR
Ethernet source and destination, Ethernet type, VLAN ID or IDs (if any), IPv4 or IPv6 source and destination, IP protocol, TCP or SCTP (but not UDP) source and destination\[char46]
.TP
\fBsymmetric_l3l4\fR
IPv4 or IPv6 source and destination, IP protocol, TCP or SCTP (but not UDP) source and destination\[char46]
.TP
\fBsymmetric_l3l4+udp\fR
Like \fBsymmetric_l3l4\fR but include UDP ports\[char46]
.RE
.PP
.PP
\fIalgorithm\fR must be one of the following:
.PP
.RS
.TP
\fBactive_backup\fR
Chooses the first live port listed in \fIslaves\fR\[char46]
.TP
\fBhrw\fR (Highest Random Weight)
Computes the following, considering only the live ports in \fIslaves\fR:
.IP
.nf
\fB
.br
\fBfor \fR\fIi\fB\fR in [1,\fR\fIn_slaves\fB\fR]:
.br
\fB    \fR\fIweights\fB\fR[\fR\fIi\fB\fR] = hash(\fR\fIflow\fB\fR, \fR\fIi\fB\fR)
.br
\fB\fR\fIslave\fB\fR = { \fR\fIi\fB\fR such that \fR\fIweights\fB\fR[\fR\fIi\fB\fR] >= \fR\fIweights\fB\fR[\fR\fIj\fB\fR] for all \fR\fIj\fB\fR != \fR\fIi\fB\fR }
.br
\fB          \fR
.fi
.IP
This algorithm is specified by RFC 2992\[char46]
.RE
.PP
.PP
The algorithms take port liveness into account when selecting slaves\[char46] The definition of whether a port is live is subject to change\[char46] It currently takes into account carrier status and link monitoring protocols such as BFD and CFM\[char46] If none of the slaves is live, \fBbundle\fR does not output the packet and \fBbundle_load\fR stores \fBOFPP_NONE\fR (65535) in the output field\[char46]
.PP
.PP
Example: \fBbundle(eth_src,0,hrw,ofport,slaves:4,8)\fR uses an Ethernet source hash with basis 0, to select between OpenFlow ports 4 and 8 using the Highest Random Weight algorithm\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
Open vSwitch 1\[char46]2 introduced the \fBbundle\fR and \fBbundle_load\fR OpenFlow extension actions\[char46]
.PP
.PP
.PP
.SS "The \fBgroup\fB action"
.IP "\fBSyntax:\fR"
\fBgroup:\fR\fIgroup\fR
.PP
.PP
Outputs the packet to the OpenFlow group \fIgroup\fR, which must be a number in the range 0 to 4294967040 (0xffffff00)\[char46] The group must exist or Open vSwitch will refuse to add the flow\[char46] When a group is deleted, Open vSwitch also deletes all of the flows that output to it\[char46]
.PP
.PP
Groups contain action sets, whose semantics are described above in the section ``Action Sets\(cq\(cq\[char46] The semantics of action sets can be surprising to users who expect action list semantics, since action sets reorder and sometimes ignore actions\[char46]
.PP
.PP
A \fBgroup\fR action usually executes the action set or sets in one or more group buckets\[char46] Open vSwitch saves the packet and metadata before it executes each bucket, and then restores it afterward\[char46] Thus, when a group executes more than one bucket, this means that each bucket executes on the same packet and metadata\[char46] Moreover, regardless of the number of buckets executed, the packet and metadata are the same before and after executing the group\[char46]
.PP
.PP
Sometimes saving and restoring the packet and metadata can be undesirable\[char46] In these situations, workarounds are possible\[char46] For example, consider a pipeline design in which a \fBselect\fR group bucket is to communicate to a later stage of processing a value based on which bucket was selected\[char46] An obvious design would be for the bucket to communicate the value via \fBset_field\fR on a register\[char46] This does not work because registers are part of the metadata that \fBgroup\fR saves and restores\[char46] The following alternative bucket designs do work:
.PP
.RS
.IP \(bu
Recursively invoke the rest of the pipeline with \fBresubmit\fR\[char46]
.IP \(bu
Use \fBresubmit\fR into a table that uses \fBpush\fR to put the value on the stack for the caller to \fBpop\fR off\[char46] This works because \fBgroup\fR preserves only packet data and metadata, not the stack\[char46]
.IP
(This design requires indirection through \fBresubmit\fR because actions sets may not contain \fBpush\fR or \fBpop\fR actions\[char46])
.RE
.PP
.PP
An \fBexit\fR action within a group bucket terminates only execution of that bucket, not other buckets or the overall pipeline\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
OpenFlow 1\[char46]1 introduced \fBgroup\fR\[char46] Open vSwitch 2\[char46]6 and later also supports \fBgroup\fR as an extension to OpenFlow 1\[char46]0\[char46]
.bp
.SH "ENCAPSULATION AND DECAPSULATION ACTIONS"
.PP
.PP
.SS "The \fBstrip_vlan\fB and \fBpop\fB actions"
.IP "\fBSyntax:\fR"
\fBstrip_vlan\fR
.IQ
\fBpop_vlan\fR
.PP
.PP
Removes the outermost VLAN tag, if any, from the packet\[char46]
.PP
.PP
The two names for this action are synonyms with no semantic difference\[char46] The OpenFlow 1\[char46]0 specification uses the name \fBstrip_vlan\fR and later versions use \fBpop_vlan\fR, but OVS accepts either name regardless of version\[char46]
.PP
.PP
In OpenFlow 1\[char46]1 and later, consistency rules allow \fBstrip_vlan\fR only in a flow that matches only packets with a VLAN tag (or following an action that pushes a VLAN tag, such as \fBpush_vlan\fR)\[char46] See ``Inconsistencies\(cq\(cq, above, for more information\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
All versions of OpenFlow and Open vSwitch support this action\[char46]
.PP
.PP
.PP
.SS "The \fBpush_vlan\fB action"
.IP "\fBSyntax:\fR"
\fBpush_vlan:\fR\fIethertype\fR
.PP
.PP
Pushes a new outermost VLAN onto the packet\[char46] Uses TPID \fIethertype\fR, which must be \fB0x8100\fR for an 802\[char46]1Q C-tag or \fB0x88a8\fR for a 802\[char46]1ad S-tag\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
OpenFlow 1\[char46]1 and later supports this action\[char46] Open vSwitch 2\[char46]8 added support for multiple VLAN tags (with a limit of 2) and 802\[char46]1ad S-tags\[char46]
.PP
.PP
.PP
.SS "The \fBpush_mpls\fB action"
.IP "\fBSyntax:\fR"
\fBpush_mpls:\fIethertype\fB\fR
.PP
.PP
Pushes a new outermost MPLS label stack entry (LSE) onto the packet and changes the packet\(cqs Ethertype to \fIethertype\fR, which must be either \fBB0x8847\fR or \fB0x8848\fR\[char46]
.PP
.PP
If the packet did not already contain any MPLS labels, initializes the new LSE as:
.PP
.RS
.TP
Label
2, if the packet contains IPv6, 0 otherwise\[char46]
.TP
TC
The low 3 bits of the packet\(cqs DSCP value, or 0 if the packet is not IP\[char46]
.TP
TTL
Copied from the IP TTL, or 64 if the packet is not IP\[char46]
.RE
.PP
.PP
If the packet did already contain an MPLS label, initializes the new outermost label as a copy of the existing outermost label\[char46]
.PP
.PP
OVS currently supports at most 3 MPLS labels\[char46]
.PP
.PP
This action applies only to Ethernet packets\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
Open vSwitch 1\[char46]11 introduced support for MPLS\[char46] OpenFlow 1\[char46]1 and later support \fBpush_mpls\fR\[char46] Open vSwitch implements \fBpush_mpls\fR as an extension to OpenFlow 1\[char46]0\[char46]
.PP
.PP
.PP
.SS "The \fBpop_mpls\fB action"
.IP "\fBSyntax:\fR"
\fBpop_mpls:\fIethertype\fB\fR
.PP
.PP
Strips the outermost MPLS label stack entry and changes the packet\(cqs Ethertype to \fIethertype\fR\[char46]
.PP
.PP
This action applies only to Ethernet packets with at least one MPLS label\[char46] If there is more than one MPLS label, then \fIethertype\fR should be an MPLS Ethertype (\fBB0x8847\fR or \fB0x8848\fR)\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
Open vSwitch 1\[char46]11 introduced support for MPLS\[char46] OpenFlow 1\[char46]1 and later support \fBpop_mpls\fR\[char46] Open vSwitch implements \fBpop_mpls\fR as an extension to OpenFlow 1\[char46]0\[char46]
.PP
.PP
.PP
.SS "The \fBencap\fB action"
.IP "\fBSyntax:\fR"
\fBencap(nsh(\fR[\fBmd_type=\fImd_type\fB\fR]\fB, \fR[\fBtlv(\fIclass\fB,\fItype\fB,\fIvalue\fB)\fR]\[char46]\[char46]\[char46]\fB))\fR
.IQ
\fBencap(ethernet)\fR
.PP
.PP
The \fBencap\fR action encapsulates a packet with a specified header\[char46] It has variants for different kinds of encapsulation\[char46]
.PP
.PP
The \fBencap(nsh(\fR\[char46]\[char46]\[char46]\fB))\fR variant encapsulates an Ethernet frame with NSH\[char46] The \fImd_type\fR may be \fB1\fR or \fB2\fR for metadata type 1 or 2, defaulting to 1\[char46] For metadata type 2, TLVs may be specified with \fIclass\fR as a 16-bit hexadecimal integer beginning with \fB0x\fR, \fItype\fR as an 8-bit decimal integer, and \fIvalue\fR a sequence of pairs of hex digits beginning with \fB0x\fR\[char46] For example:
.PP
.RS
.TP
\fBencap(nsh(md_type=1))\fR
Encapsulates the packet with an NSH header with metadata type 1\[char46]
.TP
\fBencap(nsh(md_type=2,tlv(0x1000,10,0x12345678)))\fR
Encapsulates the packet with an NSH header, NSH metadata type 2, and an NSH TLV with class 0x1000, type 10, and the 4-byte value 0x12345678\[char46]
.RE
.PP
.PP
The \fBencap(ethernet)\fR variant encapsulate a bare L3 packet in an Ethernet frame\[char46] The Ethernet type is initialized to the L3 packet\(cqs type, e\[char46]g\[char46] 0x0800 if the L3 packet is IPv4\[char46] The Ethernet source and destination are initially zeroed\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
This action is an Open vSwitch extension to OpenFlow 1\[char46]3 and later, introduced in Open vSwitch 2\[char46]8\[char46]
.PP
.PP
.PP
.SS "The \fBdecap\fB action"
.IP "\fBSyntax:\fR"
\fBdecap\fR
.PP
.PP
Removes an outermost encapsulation from the packet:
.PP
.RS
.IP \(bu
If the packet is an Ethernet packet, removes the Ethernet header, which changes the packet into a bare L3 packet\[char46] If the packet has VLAN tags, raises an unsupported packet type error (see ``Error Handling\(cq\(cq, above)\[char46]
.IP \(bu
Otherwise, if the packet is an NSH packet, removes the NSH header, revealing the inner packet\[char46] Open vSwitch supports Ethernet, IPv4, IPv6, and NSH inner packet types\[char46] Other types raise unsupported packet type errors\[char46]
.IP \(bu
Otherwise, raises an unsupported packet type error\[char46]
.RE
.PP
.IP "\fBConformance:\fR"
.PP
This action is an Open vSwitch extension to OpenFlow 1\[char46]3 and later, introduced in Open vSwitch 2\[char46]8\[char46]
.bp
.SH "FIELD MODIFICATION ACTIONS"
.PP
.PP
These actions modify packet data and metadata fields\[char46]
.PP
.PP
.SS "The \fBset_field\fB and \fBload\fB actions"
.IP "\fBSyntax:\fR"
\fBset_field:\fR\fIvalue\fR[\fB/\fR\fImask\fR]\fB\->\fR\fIdst\fR
.IQ
\fBload:\fR\fIvalue\fR\fB\->\fR\fIdst\fR\fB\fR
.PP
.PP
These actions loads a literal value into a field or part of a field\[char46] The \fBset_field\fR action takes \fIvalue\fR in the customary syntax for field \fIdst\fR, e\[char46]g\[char46] \fB00:11:22:33:44:55\fR for an Ethernet address, and \fIdst\fR as the field\(cqs name\[char46] The optional \fImask\fR allows part of a field to be set\[char46]
.PP
.PP
The \fBload\fR action takes \fIvalue\fR as an integer value (in decimal or prefixed by \fB0x\fR for hexadecimal) and \fIdst\fR as a field or subfield in the syntax described under ``Field Specifications\(cq\(cq above\[char46]
.PP
.PP
The following all set the Ethernet source address to 00:11:22:33:44:55:
.PP
.RS
.IP \(bu
\fBset_field:00:11:22:33:44:55\->eth_src\fR
.IP \(bu
\fBload:0x001122334455\->eth_src\fR
.IP \(bu
\fBload:0x001122334455\->OXM_OF_ETH_SRC[]\fR
.RE
.PP
.PP
The following all set the multicast bit in the Ethernet destination address:
.PP
.RS
.IP \(bu
\fBset_field:01:00:00:00:00:00/01:00:00:00:00:00\->eth_dst\fR
.IP \(bu
\fBload:1\->eth_dst[40]\fR
.RE
.PP
.PP
Open vSwitch prohibits a \fBset_field\fR or \fBload\fR action whose \fIdst\fR is not guaranteed to be part of the packet; for example, \fBset_field\fR of \fBnw_dst\fR is only allowed in a flow that matches on Ethernet type 0x800\[char46] In some cases, such as in an action set, Open vSwitch can\(cqt statically check that \fIdst\fR is part of the packet, and in that case if it is not then Open vSwitch treats the action as a no-op\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
Open vSwitch 1\[char46]1 introduced \fBNXAST_REG_LOAD\fR as a extension to OpenFlow 1\[char46]0 and used \fBload\fR to express it\[char46] Later, OpenFlow 1\[char46]2 introduced a standard \fBOFPAT_SET_FIELD\fR action that was restricted to loading entire fields, so Open vSwitch added the form \fBset_field\fR with this restriction\[char46] OpenFlow 1\[char46]5 extended \fBOFPAT_SET_FIELD\fR to the point that it became a superset of \fBNXAST_REG_LOAD\fR\[char46] Open vSwitch translates either syntax as necessary for the OpenFlow version in use: in OpenFlow 1\[char46]0 and 1\[char46]1, \fBNXAST_REG_LOAD\fR; in OpenFlow 1\[char46]2, 1\[char46]3, and 1\[char46]4, \fBNXAST_REG_LOAD\fR for \fBload\fR or for loading a subfield, \fBOFPAT_SET_FIELD\fR otherwise; and OpenFlow 1\[char46]5 and later, \fBOFPAT_SET_FIELD\fR\[char46]
.PP
.PP
.PP
.SS "The \fBmove\fB action"
.IP "\fBSyntax:\fR"
\fBmove:\fIsrc\fB\->\fIdst\fB\fR
.PP
.PP
Copies the named bits from field or subfield \fIsrc\fR to field or subfield \fIdst\fR\[char46] \fIsrc\fR and \fIdst\fR should fields or subfields in the syntax described under ``Field Specifications\(cq\(cq above\[char46] The two fields or subfields must have the same width\[char46]
.PP
.PP
Examples:
.PP
.RS
.IP \(bu
\fBmove:reg0[0\[char46]\[char46]5]\->reg1[26\[char46]\[char46]31]\fR copies the six bits numbered 0 through 5 in register 0 into bits 26 through 31 of register 1\[char46]
.IP \(bu
\fBmove:reg0[0\[char46]\[char46]15]\->vlan_tci\fR copies the least significant 16 bits of register 0 into the VLAN TCI field\[char46]
.RE
.PP
.IP "\fBConformance:\fR"
.PP
In OpenFlow 1\[char46]0 through 1\[char46]4, \fBmove\fR ordinarily uses an Open vSwitch extension to OpenFlow\[char46] In OpenFlow 1\[char46]5, \fBmove\fR uses the OpenFlow 1\[char46]5 standard \fBOFPAT_COPY_FIELD\fR action\[char46] The ONF has also made \fBOFPAT_COPY_FIELD\fR available as an extension to OpenFlow 1\[char46]3\[char46] Open vSwitch 2\[char46]4 and later understands this extension and uses it if a controller uses it, but for backward compatibility with older versions of Open vSwitch, \fBovs\-ofctl\fR does not use it\[char46]
.PP
.PP
.PP
.SS "The \fBmod_dl_src\fB and \fBmod_dl_dst\fB actions"
.IP "\fBSyntax:\fR"
\fBmod_dl_src:\fR\fImac\fR
.IQ
\fBmod_dl_dst:\fR\fImac\fR
.PP
.PP
Sets the Ethernet source or destination address, respectively, to \fImac\fR, which should be expressed in the form \fB\fIxx\fB:\fIxx\fB:\fIxx\fB:\fIxx\fB:\fIxx\fB:\fIxx\fB\fR\[char46]
.PP
.PP
For L3-only packets, that is, those that lack an Ethernet header, this action has no effect\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
OpenFlow 1\[char46]0 and 1\[char46]1 have specialized actions for these purposes\[char46] OpenFlow 1\[char46]2 and later do not, so Open vSwitch translates them to appropriate \fBOFPAT_SET_FIELD\fR actions for those versions,
.PP
.PP
.PP
.SS "The \fBmod_nw_src\fB and \fBmod_nw_dst\fB actions"
.IP "\fBSyntax:\fR"
\fBmod_nw_src:\fR\fIip\fR
.IQ
\fBmod_nw_dst:\fR\fIip\fR
.PP
.PP
Sets the IPv4 source or destination address, respectively, to \fIip\fR, which should be expressed in the form \fB\fIw\fB\[char46]\fIx\fB\[char46]\fIy\fB\[char46]\fIz\fB\fR\[char46]
.PP
.PP
In OpenFlow 1\[char46]1 and later, consistency rules allow these actions only in a flow that matches only packets that contain an IPv4 header (or following an action that adds an IPv4 header, e\[char46]g\[char46] \fBpop_mpls:0x0800\fR)\[char46] See ``Inconsistencies\(cq\(cq, above, for more information\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
OpenFlow 1\[char46]0 and 1\[char46]1 have specialized actions for these purposes\[char46] OpenFlow 1\[char46]2 and later do not, so Open vSwitch translates them to appropriate \fBOFPAT_SET_FIELD\fR actions for those versions,
.PP
.PP
.PP
.SS "The \fBmod_nw_tos\fB and \fBmod_nw_ecn\fB actions"
.IP "\fBSyntax:\fR"
\fBmod_nw_tos:\fR\fItos\fR
.IQ
\fBmod_nw_ecn:\fR\fIecn\fR
.PP
.PP
The \fBmod_nw_tos\fR action sets the DSCP bits in the IPv4 ToS/DSCP or IPv6 traffic class field to \fItos\fR, which must be a multiple of 4 between 0 and 255\[char46] This action does not modify the two least significant bits of the ToS field (the ECN bits)\[char46]
.PP
.PP
The \fBmod_nw_ecn\fR action sets the ECN bits in the IPv4 ToS or IPv6 traffic class field to \fBecn\fR, which must be a value between 0 and 3, inclusive\[char46] This action does not modify the six most significant bits of the field (the DSCP bits)\[char46]
.PP
.PP
In OpenFlow 1\[char46]1 and later, consistency rules allow these actions only in a flow that matches only packets that contain an IPv4 or IPv6 header (or following an action that adds such a header)\[char46] See ``Inconsistencies\(cq\(cq, above, for more information\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
OpenFlow 1\[char46]0 has a \fBmod_nw_tos\fR action but not \fBmod_nw_ecn\fR\[char46] Open vSwitch implements the latter in OpenFlow 1\[char46]0 as an extension using \fBNXAST_REG_LOAD\fR\[char46] OpenFlow 1\[char46]1 has specialized actions for these purposes\[char46] OpenFlow 1\[char46]2 and later do not, so Open vSwitch translates them to appropriate \fBOFPAT_SET_FIELD\fR actions for those versions,
.PP
.PP
.PP
.SS "The \fBmod_tp_src\fB and \fBmod_tp_dst\fB actions"
.IP "\fBSyntax:\fR"
\fBmod_tp_src:\fR\fIport\fR
.IQ
\fBmod_tp_dst:\fR\fIport\fR
.PP
.PP
Sets the TCP or UDP or SCTP source or destination port, respectively, to \fIport\fR\[char46] Both IPv4 and IPv6 are supported\[char46]
.PP
.PP
In OpenFlow 1\[char46]1 and later, consistency rules allow these actions only in a flow that matches only packets that contain a TCP or UDP or SCTP header\[char46] See ``Inconsistencies\(cq\(cq, above, for more information\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
OpenFlow 1\[char46]0 and 1\[char46]1 have specialized actions for these purposes\[char46] OpenFlow 1\[char46]2 and later do not, so Open vSwitch translates them to appropriate \fBOFPAT_SET_FIELD\fR actions for those versions,
.PP
.PP
.PP
.SS "The \fBdec_ttl\fB action"
.IP "\fBSyntax:\fR"
\fBdec_ttl\fR
.IQ
\fBdec_ttl(\fIid1\fB, \fR[\fB\fIid2\fB\fR]\[char46]\[char46]\[char46]\fB)\fR
.PP
.PP
Decrement TTL of IPv4 packet or hop limit of IPv6 packet\[char46] If the TTL or hop limit is initially 0 or 1, no decrement occurs, as packets reaching TTL zero must be rejected\[char46] Instead, Open vSwitch sends a ``packet-in\(cq\(cq message with reason code \fBOFPR_INVALID_TTL\fR to each connected controller that has enabled receiving such messages, and stops processing the current set of actions\[char46] (However, if the current set of actions was reached through \fBresubmit\fR, the remaining actions in outer levels resume processing\[char46])
.PP
.PP
As an Open vSwitch extension to OpenFlow, this action supports the ability to specify a list of controller IDs\[char46] Open vSwitch will only send the message to controllers with the given ID or IDs\[char46] Specifying no list is equivalent to specifying a single controller ID of zero\[char46]
.PP
.PP
Sets the TCP or UDP or SCTP source or destination port, respectively, to \fIport\fR\[char46] Both IPv4 and IPv6 are supported\[char46]
.PP
.PP
In OpenFlow 1\[char46]1 and later, consistency rules allow these actions only in a flow that matches only packets that contain an IPv4 or IPv6 header\[char46] See ``Inconsistencies\(cq\(cq, above, for more information\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
All versions of OpenFlow and Open vSwitch support this action\[char46]
.PP
.PP
.PP
.SS "The \fBset_mpls_label\fB, \fBset_mpls_tc\fB, and \fBset_mpls_ttl\fB actions"
.IP "\fBSyntax:\fR"
\fBset_mpls_label:\fR\fIlabel\fR
.IQ
\fBset_mpls_tc:\fR\fItc\fR
.IQ
\fBset_mpls_ttl:\fR\fIttl\fR
.PP
.PP
The \fBset_mpls_label\fR action sets the label of the packet\(cqs outer MPLS label stack entry\[char46] \fIlabel\fR should be a 20-bit value that is decimal by default; use a \fB0x\fR prefix to specify the value in hexadecimal\[char46]
.PP
.PP
The \fBset_mpls_tc\fR action sets the traffic class of the packet\(cqs outer MPLS label stack entry\[char46] \fItc\fR should be in the range 0 to 7, inclusive\[char46]
.PP
.PP
The \fBset_mpls_ttl\fR action sets the TTL of the packet\(cqs outer MPLS label stack entry\[char46] \fIttl\fR should be in the range 0 to 255 inclusive\[char46]
.PP
.PP
In OpenFlow 1\[char46]1 and later, consistency rules allow these actions only in a flow that matches only packets that contain an MPLS label (or following an action that adds an MPLS label, e\[char46]g\[char46] \fBpush_mpls:0x8847\fR)\[char46] See ``Inconsistencies\(cq\(cq, above, for more information\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
OpenFlow 1\[char46]0 does not support MPLS, but Open vSwitch implements these actions as extensions\[char46] OpenFlow 1\[char46]1 has specialized actions for these purposes\[char46] OpenFlow 1\[char46]2 and later do not, so Open vSwitch translates them to appropriate \fBOFPAT_SET_FIELD\fR actions for those versions,
.PP
.PP
.PP
.SS "The \fBdec_mpls_ttl\fB and \fBdec_nsh_ttl\fB actions"
.IP "\fBSyntax:\fR"
\fBdec_mpls_ttl\fR
.IQ
\fBdec_nsh_ttl\fR
.PP
.PP
These actions decrement the TTL of the packet\(cqs outer MPLS label stack entry or its NSH header, respectively\[char46] If the TTL is initially 0 or 1, no decrement occurs\[char46] Instead, Open vSwitch sends a ``packet-in\(cq\(cq message with reason code \fBBOFPR_INVALID_TTL\fR to OpenFlow controllers with ID 0, if it has enabled receiving them\[char46] Processing the current set of actions then stops\[char46] (However, if the current set of actions was reached through \fBresubmit\fR, remaining actions in outer levels resume processing\[char46])
.PP
.PP
In OpenFlow 1\[char46]1 and later, consistency rules allow this actions only in a flow that matches only packets that contain an MPLS label or an NSH header, respectively\[char46] See ``Inconsistencies\(cq\(cq, above, for more information\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
.PP
.PP
Open vSwitch 1\[char46]11 introduced support for MPLS\[char46] OpenFlow 1\[char46]1 and later support \fBdec_mpls_ttl\fR\[char46] Open vSwitch implements \fBdec_mpls_ttl\fR as an extension to OpenFlow 1\[char46]0\[char46]
.PP
.PP
Open vSwitch 2\[char46]8 introduced support for NSH, although the NSH draft changed after release so that only Open vSwitch 2\[char46]9 and later conform to the final protocol specification\[char46] The \fBdec_nsh_ttl\fR action and NSH support in general is an Open vSwitch extension not supported by any version of OpenFlow\[char46]
.PP
.PP
.PP
.SS "The \fBcheck_pkt_larger\fB action"
.IP "\fBSyntax:\fR"
\fBcheck_pkt_larger(\fIpkt_len\fB)\->\fIdst\fB\fR
.PP
.PP
Checks if the packet is larger than the specified length in \fIpkt_len\fR\[char46] If so, stores 1 in \fIdst\fR, which should be a 1-bit field; if not, stores 0\[char46]
.PP
.PP
The packet length to check againt the argument \fIpkt_len\fR includes the L2 header and L2 payload of the packet, but not the VLAN tag (if present)\[char46]
.PP
.PP
Examples:
.PP
.RS
.IP \(bu
\fBcheck_pkt_larger(1500)\->reg0[0]\fR
.IP \(bu
\fBcheck_pkt_larger(8000)\->reg9[10]\fR
.RE
.PP
.PP
This action was added in Open vSwitch 2\[char46]11\[char46]90\[char46]
.bp
.SH "METADATA ACTIONS"
.PP
.PP
.SS "The \fBset_tunnel\fB action"
.IP "\fBSyntax:\fR"
\fBset_tunnel:\fR\fIid\fR
.IQ
\fBset_tunnel64:\fR\fIid\fR
.PP
.PP
Many kinds of tunnels support a tunnel ID, e\[char46]g\[char46] VXLAN and Geneve have a 24-bit VNI, and GRE has an optional 32-bit key\[char46] This action sets the value used for tunnel ID in such tunneled packets, although whether it is used for a particular tunnel depends on the tunnel\(cqs configuration\[char46] See the tunnel ID documentation in \fBovs\-fields\fR(7) for more information\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
.PP
.PP
These actions are OpenFlow extensions\[char46] \fBset_tunnel\fR was introduced in Open vSwitch 1\[char46]0\[char46] \fBset_tunnel64\fR, which is needed if \fIid\fR is wider than 32 bits, was added in Open vSwitch 1\[char46]1\[char46] Both actions always set the entire tunnel ID field\[char46]
.PP
.PP
Open vSwitch supports these actions in all versions of OpenFlow, but in OpenFlow 1\[char46]2 and later it translates them to an appropriate standardized \fBOFPAT_SET_FIELD\fR action\[char46]
.PP
.PP
.PP
.SS "The \fBset_queue\fB and \fBpop_queue\fB actions"
.IP "\fBSyntax:\fR"
\fBset_queue:\fR\fIqueue\fR
.IQ
\fBpop_queue\fR
.PP
.PP
The \fBset_queue\fR action sets the queue ID to be used for subsequent output actions to \fIqueue\fR, which must be a 32-bit integer\[char46] The range of meaningful values of \fIqueue\fR, and their meanings, varies greatly from one OpenFlow implementation to another\[char46] Even within a single implementation, there is no guarantee that all OpenFlow ports have the same queues configured or that all OpenFlow ports in an implementation can be configured the same way queue-wise\[char46] For more information, see the documentation for the output queue field in \fBovs\-fields\fR(7)\[char46]
.PP
.PP
The \fBpop_queue\fR restores the output queue to the default that was set when the packet entered the switch (generally 0)\[char46]
.PP
.PP
Four billion queues ought to be enough for anyone:
.URL "https://mailman.stanford.edu/pipermail/openflow-spec/2009-August/000394.html"
.PP
.IP "\fBConformance:\fR"
.PP
.PP
.PP
OpenFlow 1\[char46]1 introduced the \fBset_queue\fR action\[char46] Open vSwitch also supports it as an extension in OpenFlow 1\[char46]0\[char46]
.PP
.PP
The \fBpop_queue\fR action is an Open vSwitch extension\[char46]
.bp
.SH "FIREWALLING ACTIONS"
.PP
.PP
Open vSwitch is often used to implement a firewall\[char46] The preferred way to implement a firewall is ``connection tracking,\(cq\(cq that is, to keep track of the connection state of individual TCP sessions\[char46] The \fBct\fR action described in this section, added in Open vSwitch 2\[char46]5, implements connection tracking\[char46] For new deployments, it is the recommended way to implement firewalling with Open vSwitch\[char46]
.PP
.PP
Before \fBct\fR was added, Open vSwitch did not have built-in support for connection tracking\[char46] Instead, Open vSwitch supported the \fBlearn\fR action, which allows a received packet to add a flow to an OpenFlow flow table\[char46] This could be used to implement a primitive form of connection tracking: packets passing through the firewall in one direction could create flows that allowed response packets back through the firewall in the other direction\[char46] The additional \fBfin_timeout\fR action allowed the learned flows to expire quickly after TCP session termination\[char46]
.PP
.PP
.SS "The \fBct\fB action"
.IP "\fBSyntax:\fR"
\fBct(\fIargument\fB\fR]\[char46]\[char46]\[char46]\fB)\fR
.IQ
\fBct(commit\fR[\fB, \fIargument\fB\fR]\[char46]\[char46]\[char46]\fB)\fR
.PP
.PP
The action has two modes of operation, distinguished by whether \fBcommit\fR is present\[char46] The following arguments may be present in either mode:
.PP
.RS
.TP
\fBzone=\fIvalue\fB\fR
A zone is a 16-bit id that isolates connections into separate domains, allowing overlapping network addresses in different zones\[char46] If a zone is not provided, then the default is 0\[char46] The \fIvalue\fR may be specified either as a 16-bit integer literal or a field or subfield in the syntax described under ``Field Specifications\(cq\(cq above\[char46]
.RE
.PP
.PP
Without \fBcommit\fR, this action sends the packet through the connection tracker\[char46] The connection tracker keeps track of the state of TCP connections for packets passed through it\[char46] For each packet through a connection, it checks that it satisfies TCP invariants and signals the connection state to later actions using the \fBct_state\fR metadata field, which is documented in \fBovs\-fields\fR(7)\[char46]
.PP
.PP
In this form, \fBct\fR forks the OpenFlow pipeline:
.PP
.RS
.IP \(bu
In one fork, \fBct\fR passes the packet to the connection tracker\[char46] Afterward, it reinjects the packet into the OpenFlow pipeline with the connection tracking fields initialized\[char46] The \fBct_state\fR field is initialized with connection state and \fBct_zone\fR to the connection tracking zone specified on the \fBzone\fR argument\[char46] If the connection is one that is already tracked, \fBct_mark\fR and \fBct_label\fR to its existing mark and label, respectively; otherwise they are zeroed\[char46] In addition, \fBct_nw_proto\fR, \fBct_nw_src\fR, \fBct_nw_dst\fR, \fBct_ipv6_src\fR, \fBct_ipv6_dst\fR, \fBct_tp_src\fR, and \fBct_tp_dst\fR are initialized appropriately for the original direction connection\[char46] See the \fBresubmit\fR action for a way to search the flow table with the connection tracking original direction fields swapped with the packet 5-tuple fields\[char46] See \fBovs\-fields\fR(7) for details on the connection tracking fields\[char46]
.IP \(bu
In the other fork, the original instance of the packet continues independent processing following the \fBct\fR action\[char46] The \fBct_state\fR field and other connection tracking metadata are cleared\[char46]
.RE
.PP
.PP
Without \fBcommit\fR, the \fBct\fR action accepts the following arguments:
.PP
.RS
.TP
\fBtable=\fItable\fB\fR
Sets the OpenFlow table where the packet is reinjected\[char46] The \fItable\fR must be a number between 0 and 254 inclusive, or a table\(cqs name\[char46] If \fItable\fR is not specified, then the packet is not reinjected\[char46]
.TP
\fBnat\fR
.TQ .5in
\fBnat(\fItype\fB=\fIaddrs\fB\fR[\fB:\fIports\fB\fR][\fB,\fIflag\fB\fR]\[char46]\[char46]\[char46]\fB)\fR
Specify address and port translation for the connection being tracked\[char46] The \fItype\fR must be \fBsrc\fR, for source address/port translation (SNAT), or \fBdst\fR, for destination address/port translation (DNAT)\[char46] Setting up address translation for a new connection takes effect only if the connection is later committed with \fBct(commit\fR\[char46]\[char46]\[char46]\fB)\fR\[char46]
.IP
The \fBsrc\fR and \fBdst\fR options take the following arguments:
.RS
.TP
\fIaddrs\fR
The IP address \fIaddr\fR or range \fB\fIaddr1\fB\-\fIaddr2\fB\fR from which the translated address should be selected\[char46] If only one address is given, then that address will always be selected, otherwise the address selection can be informed by the optional persistent flag as described below\[char46] Either IPv4 or IPv6 addresses can be provided, but both addresses must be of the same type, and the datapath behavior is undefined in case of providing IPv4 address range for an IPv6 packet, or IPv6 address range for an IPv4 packet\[char46] IPv6 addresses must be bracketed with \fB[\fR and \fB]\fR if a port range is also given\[char46]
.TP
\fIports\fR
The L4 \fIport\fR or range \fB\fIport1\fB\-\fIport2\fB\fR from which the translated port should be selected\[char46] When a port range is specified, fallback to ephemeral ports does not happen, else, it will\[char46] The port number selection can be informed by the optional \fBrandom\fR and \fBhash\fR flags described below\[char46] The userspace datapath only supports the \fBhash\fR behavior\[char46]
.RE
.IP
The optional flags are:
.RS
.TP
\fBrandom\fR
The selection of the port from the given range should be done using a fresh random number\[char46] This flag is mutually exclusive with \fBhash\fR\[char46]
.TP
\fBhash\fR
The selection of the port from the given range should be done using a datapath specific hash of the packet\(cqs IP addresses and the other, non-mapped port number\[char46] This flag is mutually exclusive with \fBrandom\fR\[char46]
.TP
\fBpersistent\fR
The selection of the IP address from the given range should be done so that the same mapping can be provided after the system restarts\[char46]
.RE
.IP
If \fBalg\fR is specified for the committing \fBct\fR action that also includes \fBnat\fR with a \fBsrc\fR or \fBdst\fR attribute, then the datapath tries to set up the helper to be NAT-aware\[char46] This functionality is datapath specific and may not be supported by all datapaths\[char46]
.IP
A ``bare\(cq\(cq \fBnat\fR argument with no options will only translate the packet being processed in the way the connection has been set up with an earlier, committed \fBct\fR action\[char46] A \fBnat\fR action with \fBsrc\fR or \fBdst\fR, when applied to a packet belonging to an established (rather than new) connection, will behave the same as a bare \fBnat\fR\[char46]
.IP
Open vSwitch 2\[char46]6 introduced \fBnat\fR\[char46] Linux 4\[char46]6 was the earliest upstream kernel that implemented \fBct\fR support for \fBnat\fR\[char46]
.RE
.PP
.PP
With \fBcommit\fR, the connection tracker commits the connection to the connection tracking module\[char46] The \fBcommit\fR flag should only be used from the pipeline within the first fork of \fBct\fR without \fBcommit\fR\[char46] Information about the connection is stored beyond the lifetime of the packet in the pipeline\[char46] Some \fBct_state\fR flags are only available for committed connections\[char46]
.PP
.PP
The following options are available only with \fBcommit\fR:
.PP
.RS
.TP
\fBforce\fR
A committed connection always has the directionality of the packet that caused the connection to be committed in the first place\[char46] This is the ``original direction\(cq\(cq of the connection, and the opposite direction is the ``reply direction\(cq\(cq\[char46] If a connection is already committed, but it is in the wrong direction, \fBforce\fR effectively terminates the existing connection and starts a new one in the current direction\[char46] This flag has no effect if the original direction of the connection is already the same as that of the current packet\[char46]
.TP
\fBexec(\fIaction\fB\fR\[char46]\[char46]\[char46]\fB)\fR
Perform each \fIaction\fR within the context of connection tracking\[char46] Only actions which modify the \fBct_mark\fR or \fBct_label\fR fields are accepted within \fBexec\fR action, and these fields may only be modified with this option\[char46] For example:
.RS
.TP
\fBset_field:\fIvalue\fB[/\fImask\fB]\->ct_mark\fR
Store a 32-bit metadata value with the connection\[char46] Subsequent lookups for packets in this connection will populate \fBct_mark\fR when the packet is sent to the connection tracker with the table specified\[char46]
.TP
\fBset_field:\fIvalue\fB[/\fImask\fB]\->ct_label\fR
Store a 128-bit metadata value with the connection\[char46] Subsequent lookups for packets in this connection will populate \fBct_label\fR when the packet is sent to the connection tracker with the table specified\[char46]
.RE
.TP
\fBalg=\fIalg\fB\fR
Specify application layer gateway \fIalg\fR to track specific connection types\[char46] If subsequent related connections are sent through the \fBct\fR action, then the \fBrel\fR flag in the \fBct_state\fR field will be set\[char46] Supported types include:
.RS
.TP
\fBftp\fR
Look for negotiation of FTP data connections\[char46] Specify this option for FTP control connections to detect related data connections and populate the \fBrel\fR flag for the data connections\[char46]
.TP
\fBtftp\fR
Look for negotiation of TFTP data connections\[char46] Specify this option for TFTP control connections to detect related data connections and populate the \fBrel\fR flag for the data connections\[char46]
.RE
.IP
Related connections inherit \fBct_mark\fR from that stored with the original connection (i\[char46]e\[char46] the connection created by \fBct(alg=\fR\[char46]\[char46]\[char46]\fB)\fR)\[char46]
.RE
.PP
.PP
With the Linux datapath, global sysctl options affect \fBct\fR behavior\[char46] In particular, if \fBnet\[char46]netfilter\[char46]nf_conntrack_helper\fR is enabled, which it is by default until Linux 4\[char46]7, then application layer gateway helpers may be executed even if \fBalg\fR is not specified\[char46] For security reasons, the netfilter team recommends users disable this option\[char46] For further details, please see
.URL "http://www.netfilter.org/news.html#2012\-04\-03"
\[char46]
.PP
.PP
The \fBct\fR action may be used as a primitive to construct stateful firewalls by selectively committing some traffic, then matching \fBct_state\fR to allow established connections while denying new connections\[char46] The following flows provide an example of how to implement a simple firewall that allows new connections from port 1 to port 2, and only allows established connections to send traffic from port 2 to port 1:
.PP
.PP
.nf
\fB
.br
\fBtable=0,priority=1,action=drop
.br
\fBtable=0,priority=10,arp,action=normal
.br
\fBtable=0,priority=100,ip,ct_state=\-trk,action=ct(table=1)
.br
\fBtable=1,in_port=1,ip,ct_state=+trk+new,action=ct(commit),2
.br
\fBtable=1,in_port=1,ip,ct_state=+trk+est,action=2
.br
\fBtable=1,in_port=2,ip,ct_state=+trk+new,action=drop
.br
\fBtable=1,in_port=2,ip,ct_state=+trk+est,action=1
.br
\fB      \fR
.fi
.PP
.PP
If \fBct\fR is executed on IPv4 (or IPv6) fragments, then the message is implicitly reassembled before sending to the connection tracker and refragmented upon output, to the original maximum received fragment size\[char46] Reassembly occurs within the context of the zone, meaning that IP fragments in different zones are not assembled together\[char46] Pipeline processing for the initial fragments is halted\[char46] When the final fragment is received, the message is assembled and pipeline processing continues for that flow\[char46] Packet ordering is not guaranteed by IP protocols, so it is not possible to determine which IP fragment will cause message reassembly (and therefore continue pipeline processing)\[char46] As such, it is strongly recommended that multiple flows should not execute \fBct\fR to reassemble fragments from the same IP message\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
The \fBct\fR action was introduced in Open vSwitch 2\[char46]5\[char46] Some of its features were introduced later, noted individually above\[char46]
.PP
.PP
.PP
.SS "The \fBct_clear\fB action"
.IP "\fBSyntax:\fR"
\fBct_clear\fR
.PP
.PP
Clears connection tracking state from the flow, zeroing \fBct_state\fR, \fBct_zone\fR, \fBct_mark\fR, and \fBct_label\fR\[char46]
.PP
.PP
This action was introduced in Open vSwitch 2\[char46]6\[char46]90\[char46]
.PP
.PP
.PP
.SS "The \fBlearn\fB action"
.IP "\fBSyntax:\fR"
\fBlearn(\fIargument\fB\fR\[char46]\[char46]\[char46]\fB)\fR
.PP
.PP
The \fBlearn\fR action adds or modifies a flow in an OpenFlow table, similar to \fBovs\-ofctl \-\-strict mod\-flows\fR\[char46] The arguments specify the match fields, actions, and other properties of the flow to be added or modified\[char46]
.PP
.PP
Match fields for the new flow are specified as follows\[char46] At least one match field should ordinarily be specified:
.PP
.RS
.TP
\fB\fIfield\fB=\fIvalue\fB\fR
Specifies that \fIfield\fR, in the new flow, must match the literal \fIvalue\fR, e\[char46]g\[char46] \fBdl_type=0x800\fR\[char46] Shorthand match syntax, such as \fBip\fR in place of \fBdl_type=0x800\fR, is not supported\[char46]
.TP
\fB\fIfield\fB=\fIsrc\fB\fR
Specifies that \fIfield\fR in the new flow must match \fIsrc\fR taken from the packet currently being processed\[char46] For example, \fBudp_dst=udp_src\fR, applied to a UDP packet with source port 53, creates a flow which matches \fBudp_dst=53\fR\[char46] \fIfield\fR and \fIsrc\fR must have the same width\[char46]
.TP
\fB\fIfield\fB\fR
Shorthand for the previous form when \fIfield\fR and \fIsrc\fR are the same\[char46] For example, \fBudp_dst\fR, applied to a UDP packet with destination port 53, creates a flow which matches \fBudp_dst=53\fR\[char46]
.RE
.PP
.PP
The \fIfield\fR and \fIsrc\fR arguments above should be fields or subfields in the syntax described under ``Field Specifications\(cq\(cq above\[char46]
.PP
.PP
Match field specifications must honor prerequisites for both the flow with the \fBlearn\fR and the new flow that it creates\[char46] Consider the following complete flow, in the syntax accepted by \fBovs\-ofctl\fR\[char46] If the flow\(cqs match on \fBudp\fR were omitted, then the flow would not satisfy the prerequisites for the \fBlearn\fR action\(cqs use of \fBudp_src\fR\[char46] If \fBdl_type=0x800\fR or \fBnw_proto\fR were omitted from \fBlearn\fR, then the new flow would not satisfy the prerequisite for its match on \fBudp_dst\fR\[char46] For more information on prerequisites, please refer to \fBovs\-fields\fR(7):
.PP
.PP
.nf
\fB
.br
\fB        udp, actions=learn(dl_type=0x800, nw_proto=17, udp_dst=udp_src)
.br
\fB      \fR
.fi
.PP
.PP
Actions for the new flow are specified as follows\[char46] At least one action should ordinarily be specified:
.PP
.RS
.TP
\fBload:\fIvalue\fB\->\fIdst\fB\fR
Adds a \fBload\fR action to the new flow that loads the literal \fIvalue\fR into \fIdst\fR\[char46] The syntax is the same as the \fBload\fR action explained in the ``Header Modification\(cq\(cq section\[char46]
.TP
\fBload:\fIsrc\fB\->\fIdst\fB\fR
Adds a \fBload\fR action to the new flow that loads \fIsrc\fR, a field or subfield from the packet being processed, into \fIdst\fR\[char46]
.TP
\fBoutput:\fIfield\fB\fR
Adds an \fBoutput\fR action to the new flow\(cqs actions that outputs to the OpenFlow port taken from \fIfield\fR, which must be a field as described above\[char46]
.TP
\fBfin_idle_timeout=\fIseconds\fB\fR
.TQ .5in
\fBfin_hard_timeout=\fIseconds\fB\fR
Adds a \fBfin_timeout\fR action with the specified arguments to the new flow\[char46] This feature was added in Open vSwitch 1\[char46]5\[char46]90\[char46]
.RE
.PP
The following additional arguments are optional:
.RS
.TP
\fBidle_timeout=\fIseconds\fB\fR
.TQ .5in
\fBhard_timeout=\fIseconds\fB\fR
.TQ .5in
\fBpriority=\fIvalue\fB\fR
.TQ .5in
\fBcookie=\fIvalue\fB\fR
.TQ .5in
\fBsend_flow_rem\fR
These arguments have the same meaning as in the usual flow syntax documented in \fBovs\-ofctl\fR(8)\[char46]
.TP
\fBtable=\fItable\fB\fR
The table in which the new flow should be inserted\[char46] Specify a decimal number between 0 and 254 inclusive or the name of a table\[char46] The default, if table is unspecified, is table 1 (not 0)\[char46]
.TP
\fBdelete_learned\fR
When this flag is specified, deleting the flow that contains the \fBlearn\fR action will also delete the flows created by \fBlearn\fR\[char46] Specifically, when the last \fBlearn\fR action with this flag and particular \fBtable\fR and \fBcookie\fR values is removed, the switch deletes all of the flows in the specified table with the specified cookie\[char46]
.IP
This flag was added in Open vSwitch 2\[char46]4\[char46]
.TP
\fBlimit=\fInumber\fB\fR
If the number of flows in the new flow\(cqs table with the same cookie exceeds \fBnumber\fR, the action will not add a new flow\[char46] By default, or with \fBlimit=0\fR, there is no limit\[char46]
.IP
This flag was added in Open vSwitch 2\[char46]8\[char46]
.TP
\fBresult_dst=\fIfield\fB[\fIbit\fB]\fR
If learn fails (because the number of flows exceeds \fBlimit\fR), the action sets \fB\fIfield\fB[\fIbit\fB]\fR to 0, otherwise it will be set to 1\[char46] \fBfield[bit]\fR must be a single bit\[char46]
.IP
This flag was added in Open vSwitch 2\[char46]8\[char46]
.RE
.PP
.PP
By itself, the \fBlearn\fR action can only put two kinds of actions into the flows that it creates: \fBload\fR and \fBoutput\fR actions\[char46] If \fBlearn\fR is used in isolation, these are severe limits\[char46]
.PP
.PP
However, \fBlearn\fR is not meant to be used in isolation\[char46] It is a primitive meant to be used together with other Open vSwitch features to accomplish a task\[char46] Its existing features are enough to accomplish most tasks\[char46]
.PP
.PP
Here is an outline of a typical pipeline structure that allows for versatile behavior using \fBlearn\fR:
.PP
.RS
.IP \(bu
Flows in table \fIA\fR contain a \fBlearn\fR action, that populates flows in table \fIL\fR, that use a \fBload\fR action to populate register \fIR\fR with information about what was learned\[char46]
.IP \(bu
Flows in table \fIB\fR contain two sequential resubmit actions: one to table \fIL\fR and another one to table \fIB\fR+1\[char46]
.IP \(bu
Flows in table \fIB\fR+1 match on register \fIR\fR and act differently depending on what the flows in table \fIL\fR loaded into it\[char46]
.RE
.PP
.PP
This approach can be used to implement many \fBlearn\fR-based features\[char46] For example:
.PP
.RS
.IP \(bu
Resubmit to a table selected based on learned information, e\[char46]g\[char46] see
.URL "https://mail.openvswitch.org/pipermail/ovs-discuss/2016-June/021694.html"
\[char46]
.IP \(bu
MAC learning in the middle of a pipeline, as described in the ``Open vSwitch Advanced Features Tutorial\(cq\(cq in the OVS documentation\[char46]
.IP \(bu
TCP state based firewalling, by learning outgoing connections based on SYN packets and matching them up with incoming packets\[char46] (This is usually better implemented using the \fBct\fR action\[char46])
.IP \(bu
At least some of the features described in T\[char46] A\[char46] Hoff, ``Extending Open vSwitch to Facilitate Creation of Stateful SDN Applications\(cq\(cq\[char46]
.RE
.PP
.IP "\fBConformance:\fR"
.PP
The \fBlearn\fR action is an Open vSwitch extension to OpenFlow added in Open vSwitch 1\[char46]3\[char46] Some features of \fBlearn\fR were added in later versions, as noted individually above\[char46]
.PP
.PP
.PP
.SS "The \fBfin_timeout\fB action"
.IP "\fBSyntax:\fR"
\fBfin_timeout(\fIkey\fB=\fIvalue\fB\fR\[char46]\[char46]\[char46]\fB)\fR
.PP
.PP
This action changes the idle timeout or hard timeout, or both, of the OpenFlow flow that contains it, when the flow matches a TCP packet with the FIN or RST flag\[char46] When such a packet is observed, the action reduces the rule\(cqs timeouts to those specified on the action\[char46] If the rule\(cqs existing timeout is already shorter than the one that the action specifies, then that timeout is unaffected\[char46]
.PP
.PP
The timeouts are specified as key-value pairs:
.PP
.RS
.TP
\fBidle_timeout=\fR\fIseconds\fR
Causes the flow to expire after the given number of seconds of inactivity\[char46]
.TP
\fBhard_timeout=\fR\fIseconds\fR
Causes the flow to expire after the given number of \fIseconds\fR, regardless of activity\[char46] (\fIseconds\fR specifies time since the flow\(cqs creation, not since the receipt of the FIN or RST\[char46])
.RE
.PP
.PP
This action is normally added to a learned flow by the \fBlearn\fR action\[char46] It is unlikely to be useful otherwise\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
This Open vSwitch extension action was added in Open vSwitch 1\[char46]5\[char46]90\[char46]
.bp
.SH "PROGRAMMING AND CONTROL FLOW ACTIONS"
.PP
.PP
.SS "The \fBresubmit\fB action"
.IP "\fBSyntax:\fR"
\fBresubmit:\fIport\fB\fR
.IQ
\fBresubmit(\fR[\fB\fIport\fB\fR]\fB,\fR[\fB\fItable\fB\fR][\fB,ct\fR]\fB)\fR
.PP
.PP
Searches an OpenFlow flow table for a matching flow and executes the actions found, if any, before continuing to the following action in the current flow entry\[char46] Arguments can customize the search:
.PP
.RS
.IP \(bu
If \fIport\fR is given as an OpenFlow port number or name, then it specifies a value to use for the input port metadata field as part of the search, in place of the input port currently in the flow\[char46] Specifying \fBin_port\fR as \fIport\fR is equivalent to omitting it\[char46]
.IP \(bu
If \fItable\fR is given as an integer between 0 and 254 or a table name, it specifies the OpenFlow table to search\[char46] If it is not specified, the table from the current flow is used\[char46]
.IP \(bu
If \fBct\fR is specified, then the search is done with packet 5-tuple fields swapped with the corresponding conntrack original direction tuple fields\[char46] See the documentation for \fBct\fR above, for more information about connection tracking, or \fBovs\-fields\fR(7) for details about the connection tracking fields\[char46]
.IP
This flag requires a valid connection tracking state as a match prerequisite in the flow where this action is placed\[char46] Examples of valid connection tracking state matches include \fBct_state=+new\fR, \fBct_state=+est\fR, \fBct_state=+rel\fR, and \fBct_state=+trk\-inv\fR\[char46]
.RE
.PP
.PP
The changes, if any, to the input port and connection tracking fields are just for searching the flow table\[char46] The changes are not visible to actions or to later flow table lookups\[char46]
.PP
.PP
The most common use of \fBresubmit\fR is to visit another flow table without \fIport\fR or \fBct\fR, like this: \fBresubmit(,\fItable\fB)\fR\[char46]
.PP
.PP
Recursive \fBresubmit\fR actions are permitted\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
.PP
.PP
The \fBresubmit\fR action is an Open vSwitch extension\[char46] However, the \fBgoto_table\fR instruction in OpenFlow 1\[char46]1 and later can be viewed as a kind of restricted \fBresubmit\fR\[char46]
.PP
.PP
Open vSwitch 1\[char46]2\[char46]90 added \fItable\fR\[char46] Open vSwitch 2\[char46]7 added \fBct\fR\[char46]
.PP
.PP
Open vSwitch imposes a limit on \fBresubmit\fR recursion that varies among version:
.RS
.IP \(bu
Open vSwitch 1\[char46]0\[char46]1 and earlier did not support recursion\[char46]
.IP \(bu
Open vSwitch 1\[char46]0\[char46]2 and 1\[char46]0\[char46]3 limited recursion to 8 levels\[char46]
.IP \(bu
Open vSwitch 1\[char46]1 and 1\[char46]2 limited recursion to 16 levels\[char46]
.IP \(bu
Open vSwitch 1\[char46]2 through 1\[char46]8 limited recursion to 32 levels\[char46]
.IP \(bu
Open vSwitch 1\[char46]9 through 2\[char46]0 limited recursion to 64 levels\[char46]
.IP \(bu
Open vSwitch 2\[char46]1 through 2\[char46]5 limited recursion to 64 levels and impose a total limit of 4,096 resubmits per flow translation (earlier versions did not impose any total limit)\[char46]
.IP \(bu
Open vSwitch 2\[char46]6 and later imposes the same limits as 2\[char46]5, with one exception: resubmit from table \fIx\fR to any table \fIy\fR > \fIx\fR does not count against the recursion depth limit\[char46]
.RE
.PP
.PP
.PP
.SS "The \fBclone\fB action"
.IP "\fBSyntax:\fR"
\fBclone(\fIaction\fB\[char46]\[char46]\[char46])\fR
.PP
.PP
Executes each nested \fIaction\fR, saving much of the packet and pipeline state beforehand and then restoring it afterward\[char46] The state that is saved and restored includes all flow data and metadata (including, for example, \fBin_port\fR and \fBct_state\fR), the stack accessed by \fBpush\fR and \fBpop\fR actions, and the OpenFlow action set\[char46]
.PP
.PP
This action was added in Open vSwitch 2\[char46]6\[char46]90\[char46]
.PP
.PP
.PP
.SS "The \fBpush\fB and \fBpop\fB actions"
.IP "\fBSyntax:\fR"
\fBpush:\fIsrc\fB\fR
.IQ
\fBpop:\fIdst\fB\fR
.PP
.PP
The \fBpush\fR action pushes \fIsrc\fR on a general-purpose stack\[char46] The \fBpop\fR action pops an entry off the stack into \fIdst\fR\[char46] \fIsrc\fR and \fIdst\fR should be fields or subfields in the syntax described under ``Field Specifications\(cq\(cq above\[char46]
.PP
.PP
Controllers can use the stack for saving and restoring data or metadata around \fBresubmit\fR actions, for swapping or rearranging data and metadata, or for other purposes\[char46] Any data or metadata field, or part of one, may be pushed, and any modifiable field or subfield may be popped\[char46]
.PP
.PP
The number of bits pushed in a stack entry do not have to match the number of bits later popped from that entry\[char46] If more bits are popped from an entry than were pushed, then the entry is conceptually left-padded with 0-bits as needed\[char46] If fewer bits are popped than pushed, then bits are conceptually trimmed from the left side of the entry\[char46]
.PP
.PP
The stack\(cqs size is limited\[char46] The limit is intended to be high enough that ``normal\(cq\(cq use will not pose problems\[char46] Stack overflow or underflow is an error that stops action execution (see ``Stack too deep\(cq\(cq under ``Error Handling\(cq\(cq, above)\[char46]
.PP
.PP
Examples:
.PP
.RS
.IP \(bu
\fBpush:reg2[0\[char46]\[char46]5]\fR or \fBpush:NXM_NX_REG2[0\[char46]\[char46]5]\fR pushes on the stack the 6 bits in register 2 bits 0 through 5\[char46]
.IP \(bu
\fBpop:reg2[0\[char46]\[char46]5]\fR or \fBpop:NXM_NX_REG2[0\[char46]\[char46]5]\fR pops the value from top of the stack and copy bits 0 through 5 of that value into bits 0 through 5 of register 2\[char46]
.RE
.PP
.IP "\fBConformance:\fR"
.PP
Open vSwitch 1\[char46]2 introduced \fBpush\fR and \fBpop\fR as OpenFlow extension actions\[char46]
.PP
.PP
.PP
.SS "The \fBexit\fB action"
.IP "\fBSyntax:\fR"
\fBexit\fR
.PP
.PP
This action causes Open vSwitch to immediately halt execution of further actions\[char46] Actions which have already been executed are unaffected\[char46] Any further actions, including those which may be in other tables, or different levels of the \fBresubmit\fR call stack, are ignored\[char46] However, an \fBexit\fR action within a group bucket terminates only execution of that bucket, not other buckets or the overall pipeline\[char46] Actions in the action set are still executed (specify \fBclear_actions\fR before \fBexit\fR to discard them)\[char46]
.PP
.PP
.PP
.SS "The \fBmultipath\fB action"
.IP "\fBSyntax:\fR"
\fBmultipath(\fIfields\fB, \fIbasis\fB, \fIalgorithm\fB, \fIn_links\fB, \fIarg\fB, \fIdst\fB)\fR
.PP
.PP
Hashes \fIfields\fR using \fIbasis\fR as a universal hash parameter, then the applies multipath link selection \fIalgorithm\fR (with parameter \fIarg\fR) to choose one of \fIn_links\fR output links numbered 0 through \fIn_links\fR minus 1, and stores the link into \fIdst\fR, which must be a field or subfield in the syntax described under ``Field Specifications\(cq\(cq above\[char46]
.PP
.PP
The \fBbundle\fR or \fBbundle_load\fR actions are usually easier to use than \fBmultipath\fR\[char46]
.PP
.PP
\fIfields\fR must be one of the following:
.PP
.RS
.TP
\fBeth_src\fR
Hashes Ethernet source address only\[char46]
.TP
\fBsymmetric_l4\fR
Hashes Ethernet source, destination, and type, VLAN ID, IPv4/IPv6 source, destination, and protocol, and TCP or SCTP (but not UDP) ports\[char46] The hash is computed so that pairs of corresponding flows in each direction hash to the same value, in environments where L2 paths are the same in each direction\[char46] UDP ports are not included in the hash to support protocols such as VXLAN that use asymmetric ports in each direction\[char46]
.TP
\fBsymmetric_l3l4\fR
Hashes IPv4/IPv6 source, destination, and protocol, and TCP or SCTP (but not UDP) ports\[char46] Like \fBsymmetric_l4\fR, this is a symmetric hash, but by excluding L2 headers it is more effective in environments with asymmetric L2 paths (e\[char46]g\[char46] paths involving VRRP IP addresses on a router)\[char46] Not an effective hash function for protocols other than IPv4 and IPv6, which hash to a constant zero\[char46]
.TP
\fBsymmetric_l3l4+udp\fR
Like \fBsymmetric_l3l4+udp\fR, but UDP ports are included in the hash\[char46] This is a more effective hash when asymmetric UDP protocols such as VXLAN are not a consideration\[char46]
.TP
\fBsymmetric_l3\fR
Hashes network source address and network destination address\[char46]
.TP
\fBnw_src\fR
Hashes network source address only\[char46]
.TP
\fBnw_dst\fR
Hashes network destination address only\[char46]
.RE
.PP
.PP
The \fIalgorithm\fR used to compute the final result \fIlink\fR must be one of the following:
.PP
.RS
.TP
\fBmodulo_n\fR
Computes \fIlink\fR = hash(\fIflow\fR) % \fIn_links\fR\[char46]
.IP
This algorithm redistributes all traffic when \fIn_links\fR changes\[char46] It has \fIO(1)\fR performance\[char46]
.IP
Use 65535 for \fImax_link\fR to get a raw hash value\[char46]
.IP
This algorithm is specified by RFC 2992\[char46]
.TP
\fBhash_threshold\fR
Computes \fIlink\fR = hash(\fIflow\fR) / (\fBMAX_HASH\fR / \fIn_links\fR)\[char46]
.IP
Redistributes between one-quarter and one-half of traffic when n_links changes\[char46] It has \fIO(1)\fR performance\[char46]
.IP
This algorithm is specified by RFC 2992\[char46]
.TP
\fBhrw\fR (Highest Random Weight)
Computes the following:
.IP
.nf
\fB
.br
\fBfor \fR\fIi\fB\fR in [0,\fR\fIn_links\fB\fR]:
.br
\fB    \fR\fIweights\fB\fR[\fR\fIi\fB\fR] = hash(\fR\fIflow\fB\fR, \fR\fIi\fB\fR)
.br
\fB\fR\fIlink\fB\fR = { \fR\fIi\fB\fR such that \fR\fIweights\fB\fR[\fR\fIi\fB\fR] >= \fR\fIweights\fB\fR[\fR\fIj\fB\fR] for all \fR\fIj\fB\fR != \fR\fIi\fB\fR }
.br
\fB          \fR
.fi
.IP
Redistributes 1/\fIn_links\fR of traffic when \fIn_links\fR changes\[char46] It has \fIO(\fIn_links\fI)\fR performance\[char46] If \fIn_links\fR is greater than a threshold (currently 64, but subject to change), Open vSwitch will substitute another algorithm automatically\[char46]
.IP
This algorithm is specified by RFC 2992\[char46]
.TP
\fBiter_hash\fR (Iterative Hash)
Computes the following:
.IP
.nf
\fB
.br
\fB\fR\fIi\fB\fR = 0
.br
\fBrepeat:
.br
\fB    \fR\fIi\fB\fR = \fR\fIi\fB\fR + 1
.br
\fB    \fR\fIlink\fB\fR = hash(\fR\fIflow\fB\fR, \fR\fIi\fB\fR) % \fR\fIarg\fB\fR
.br
\fBwhile \fR\fIlink\fB\fR > \fR\fImax_link\fB\fR
.br
\fB          \fR
.fi
.IP
Redistributes 1/\fIn_links\fR of traffic when \fIn_links\fR changes\[char46] O(1) performance when \fIarg\fR/\fImax_link\fR is bounded by a constant\[char46]
.IP
Redistributes all traffic when \fIarg\fR changes\[char46]
.IP
\fIarg\fR must be greater than \fImax_link\fR and for best performance should be no more than approximately \fImax_link\fR * 2\[char46] If \fIarg\fR is outside the acceptable range, Open vSwitch will automatically substitute the least power of 2 greater than \fImax_link\fR\[char46]
.IP
This algorithm is specific to Open vSwitch\[char46]
.RE
.PP
.PP
Only the \fBiter_hash\fR algorithm uses \fIarg\fR\[char46]
.PP
.PP
It is an error if \fImax_link\fR is greater than or equal to 2**\fIn_bits\fR\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
This is an OpenFlow extension added in Open vSwitch 1\[char46]1\[char46]
.bp
.SH "OTHER ACTIONS"
.PP
.PP
.SS "The \fBconjunction\fB action"
.IP "\fBSyntax:\fR"
\fBconjunction(\fIid\fB, \fIk\fB/\fIn\fB)\fR
.PP
.PP
This action allows for sophisticated ``conjunctive match\(cq\(cq flows\[char46] Refer to ``Conjunctive Match Fields\(cq\(cq in \fBovs\-fields\fR(7) for details\[char46]
.PP
.PP
A flow that has one or more \fBconjunction\fR actions may not have any other actions except for \fBnote\fR actions\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
Open vSwitch 2\[char46]4 introduced the \fBconjunction\fR action and \fBconj_id\fR field\[char46] They are Open vSwitch extensions to OpenFlow\[char46]
.PP
.PP
.PP
.SS "The \fBnote\fB action"
.IP "\fBSyntax:\fR"
\fBnote:\fR[\fIhh\fR]\[char46]\[char46]\[char46]
.PP
.PP
This action does nothing at all\[char46] OpenFlow controllers may use it to annotate flows with more data than can fit in a flow cookie\[char46]
.PP
.PP
The action may include any number of bytes represented as hex digits \fIhh\fR\[char46] Periods may separate pairs of hex digits, for readability\[char46] The \fBnote\fR action\(cqs format doesn\(cqt include an exact length for its payload, so the provided bytes will be padded on the right by enough bytes with value 0 to make the total number 6 more than a multiple of 8\[char46]
.PP
.PP
.PP
.IP "\fBConformance:\fR"
.PP
This action is an extension to OpenFlow introduced in Open vSwitch 1\[char46]1\[char46]
.PP
.PP
.PP
.SS "The \fBsample\fB action"
.IP "\fBSyntax:\fR"
\fBsample(\fIargument\fB\[char46]\[char46]\[char46])\fR
.PP
.PP
Samples packets and sends one sample for every sampled packet\[char46]
.PP
.PP
The following \fIargument\fR forms are accepted:
.PP
.RS
.TP
\fBprobability=\fIpackets\fB\fR
The number of sampled packets out of 65535\[char46] Must be greater or equal to 1\[char46]
.TP
\fBcollector_set_id=\fIid\fB\fR
The unsigned 32-bit integer identifier of the set of sample collectors to send sampled packets to\[char46] Defaults to 0\[char46]
.TP
\fBobs_domain_id=\fIid\fB\fR
When sending samples to IPFIX collectors, the unsigned 32-bit integer Observation Domain ID sent in every IPFIX flow record\[char46] Defaults to 0\[char46]
.TP
\fBobs_point_id=\fIid\fB\fR
When sending samples to IPFIX collectors, the unsigned 32-bit integer Observation Point ID sent in every IPFIX flow record\[char46] Defaults to 0\[char46]
.TP
\fBsampling_port=\fIport\fB\fR
Sample packets on \fIport\fR, which should be the ingress or egress port\[char46] This option, which was added in Open vSwitch 2\[char46]5\[char46]90, allows the IPFIX implementation to export egress tunnel information\[char46]
.TP
\fBingress\fR
.TQ .5in
\fBegress\fR
Specifies explicitly that the packet is being sampled on ingress to or egress from the switch\[char46] IPFIX reports sent by Open vSwitch before version 2\[char46]5\[char46]90 did not include a direction\[char46] From 2\[char46]5\[char46]90 until 2\[char46]6\[char46]90, IPFIX reports inferred a direction from \fIsampling_port\fR: if it was the packet\(cqs output port, then the direction was reported as egress, otherwise as ingress\[char46] Open vSwitch 2\[char46]6\[char46]90 introduced these options, which allow the inferred direction to be overridden\[char46] This is particularly useful when the ingress (or egress) port is not a tunnel\[char46]
.RE
.PP
.PP
Refer to \fBovs\-vswitchd\[char46]conf\[char46]db\fR(5) for more details on configuring sample collector sets\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
This action is an OpenFlow extension added in Open vSwitch 2\[char46]4\[char46]
.bp
.SH "INSTRUCTIONS"
.PP
.PP
Every version of OpenFlow includes actions\[char46] OpenFlow 1\[char46]1 introduced the higher-level, related concept of \fIinstructions\fR\[char46] In OpenFlow 1\[char46]1 and later, actions within a flow are always encapsulated within an instruction\[char46] Each flow has at most one instruction of each kind, which are executed in the following fixed order defined in the OpenFlow specification:
.PP
.RS
.IP 1. .4in
\fBMeter\fR
.IP 2. .4in
\fBApply\-Actions\fR
.IP 3. .4in
\fBClear\-Actions\fR
.IP 4. .4in
\fBWrite\-Actions\fR
.IP 5. .4in
\fBWrite\-Metadata\fR
.IP 6. .4in
\fBStat\-Trigger\fR (not supported by Open vSwitch)
.IP 7. .4in
\fBGoto\-Table\fR
.RE
.PP
.PP
The most important instruction is \fBApply\-Actions\fR\[char46] This instruction encapsulates any number of actions, which the instruction executes\[char46] Open vSwitch does not explicitly represent \fBApply\-Actions\fR\[char46] Instead, any action by itself is implicitly part of an \fBApply\-Actions\fR instructions\[char46]
.PP
.PP
Open vSwitch syntax requires other instructions, if present, to be in the order listed above\[char46] Otherwise it will flag an error\[char46]
.PP
.PP
.SS "The \fBmeter\fB action and instruction"
.IP "\fBSyntax:\fR"
\fBmeter:\fImeter_id\fB\fR
.PP
.PP
Apply meter \fImeter_id\fR\[char46] If a meter band rate is exceeded, the packet may be dropped, or modified, depending on the meter band type\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
.PP
.PP
OpenFlow 1\[char46]3 introduced the \fBmeter\fR instruction\[char46] OpenFlow 1\[char46]5 changes \fBmeter\fR from an instruction to an action\[char46]
.PP
.PP
OpenFlow 1\[char46]5 allows implementations to restrict \fBmeter\fR to be the first action in an action list and to exclude \fBmeter\fR from action sets, for better compatibility with OpenFlow 1\[char46]3 and 1\[char46]4\[char46] Open vSwitch restricts the \fBmeter\fR action both ways\[char46]
.PP
.PP
Open vSwitch 2\[char46]0 introduced OpenFlow protocol support for meters, but it did not include a datapath implementation\[char46] Open vSwitch 2\[char46]7 added meter support to the userspace datapath\[char46] Open vSwitch 2\[char46]10 added meter support to the kernel datapath\[char46] Open vSwitch 2\[char46]12 added support for meter as an action in OpenFlow 1\[char46]5\[char46]
.PP
.PP
.PP
.SS "The \fBclear_actions\fB instruction"
.IP "\fBSyntax:\fR"
\fBclear_actions\fR
.PP
.PP
Clears the action set\[char46] See ``Action Sets\(cq\(cq, above, for more information\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
OpenFlow 1\[char46]1 introduced \fBclear_actions\fR\[char46] Open vSwitch 2\[char46]1 added support for \fBclear_actions\fR\[char46]
.PP
.PP
.PP
.SS "The \fBwrite_actions\fB instruction"
.IP "\fBSyntax:\fR"
\fBwrite_actions(\fIaction\fB\fR\[char46]\[char46]\[char46]\fB)\fR
.PP
.PP
Adds each \fIaction\fR to the action set\[char46] The action set is carried between flow tables and then executed at the end of the pipeline\[char46] Only certain actions may be written to the action set\[char46] See ``Action Sets\(cq\(cq, above, for more information\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
OpenFlow 1\[char46]1 introduced \fBwrite_actions\fR\[char46] Open vSwitch 2\[char46]1 added support for \fBwrite_actions\fR\[char46]
.PP
.PP
.PP
.SS "The \fBwrite_metadata\fB instruction"
.IP "\fBSyntax:\fR"
\fBwrite_metadata:\fIvalue\fB\fR[\fB/\fImask\fB\fR]
.PP
.PP
Updates the flow\(cqs \fBmetadata\fR field\[char46] If \fImask\fR is omitted, \fBmetadata\fR is set exactly to \fIvalue\fR; if \fImask\fR is specified, then a 1-bit in \fImask\fR indicates that the corresponding bit in \fBmetadata\fR will be replaced with the corresponding bit from \fIvalue\fR\[char46] Both \fIvalue\fR and \fImask\fR are 64-bit values that are decimal by default; use a \fB0x\fR prefix to specify them in hexadecimal\[char46]
.PP
.PP
The \fBmetadata\fR field can also be matched in the flow table and updated with actions such as \fBset_field\fR and \fBmove\fR\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
OpenFlow 1\[char46]1 introduced \fBwrite_metadata\fR\[char46] Open vSwitch 2\[char46]1 added support for \fBwrite_metadata\fR\[char46]
.PP
.PP
.PP
.SS "The \fBgoto_table\fB instruction"
.IP "\fBSyntax:\fR"
\fBgoto_table:\fItable\fB\fR
.PP
.PP
Jumps to \fItable\fR as the next table in the process pipeline\[char46] The table may be a number between 0 and 254 or a table name\[char46]
.PP
.PP
It is an error if \fItable\fR is less than or equal to the table of the flow that contains it; that is, \fBgoto_table\fR must move forward in the OpenFlow pipeline\[char46] Since \fBgoto_table\fR must be the last instruction in a flow, it never leads to recursion\[char46] The \fBresubmit\fR extension action is more flexible\[char46]
.PP
.IP "\fBConformance:\fR"
.PP
OpenFlow 1\[char46]1 introduced \fBgoto_table\fR\[char46] Open vSwitch 2\[char46]1 added support for \fBgoto_table\fR\[char46]
.PP
.PP
